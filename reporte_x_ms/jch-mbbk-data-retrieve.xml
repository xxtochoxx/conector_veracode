<?xml version='1.0' encoding='UTF-8'?><detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.5" account_id="77287" app_name="jch-mbbk-data-retrieve" app_id="949564" analysis_id="12199424" static_analysis_unit_id="12215087" sandbox_id="2616273" first_build_submitted_date="2021-05-20 22:37:59 UTC" version="2678f94a857ebbf11dc001fd56212fd1801a06d8 Promoted" build_id="12225073" submitter="Carlos Fajardo" platform="Not Specified" assurance_level="5" business_criticality="5" generation_date="2021-06-03 23:47:00 UTC" veracode_level="VL3" total_flaws="97" flaws_not_mitigated="97" teams="Default Team" life_cycle_stage="Not Specified" planned_deployment_date="2021-05-20 04:00:00 UTC" last_update_time="2021-05-21 18:47:35 UTC" is_latest_build="true" policy_name="Veracode Recommended Very High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="Erick Alencar" business_unit="Not Specified" tags="mbbk" legacy_scan_engine="false"><static-analysis rating="C" score="75" submitted_date="2021-05-21 18:44:35 UTC" published_date="2021-05-21 18:47:26 UTC" version="2678f94a857ebbf11dc001fd56212fd1801a06d8 Promoted" next_scan_due="2021-08-21 18:47:26 UTC" analysis_size_bytes="9549194" engine_version="20210505204107"><modules><module name="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" compiler="JAVAC_8" os="Java J2SE 8" architecture="JVM" loc="8484" score="75" numflawssev0="0" numflawssev1="0" numflawssev2="0" numflawssev3="96" numflawssev4="0" numflawssev5="0" /><module name="springfox-swagger-ui-3_mapfile_swagger-ui-bundle.js.map.jsa" compiler="JAVASCRIPT_5_1" os="JavaScript" architecture="JAVASCRIPT" loc="12971" score="99" numflawssev0="0" numflawssev1="0" numflawssev2="0" numflawssev3="1" numflawssev4="0" numflawssev5="0" /><module name="springfox-swagger-ui-3.0.0-SNAPSHOT.jar_htmljscode.veracodegen.htmla.jsa" compiler="JAVASCRIPT_5_1" os="JavaScript" architecture="JAVASCRIPT" loc="161" score="100" numflawssev0="0" numflawssev1="0" numflawssev2="0" numflawssev3="0" numflawssev4="0" numflawssev5="0" /><module name="springfox-swagger-ui-3_mapfile_swagger-ui-standalone-preset.js.map.jsa" compiler="JAVASCRIPT_5_1" os="JavaScript" architecture="JAVASCRIPT" loc="1590" score="100" numflawssev0="0" numflawssev1="0" numflawssev2="0" numflawssev3="0" numflawssev4="0" numflawssev5="0" /></modules></static-analysis><severity level="5" /><severity level="4" /><severity level="3"><category categoryid="21" categoryname="CRLF Injection" pcirelated="true"><desc><para text="The acronym CRLF stands for &quot;Carriage Return, Line Feed&quot; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  " /></desc><recommendations><para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents." /></recommendations><cwe cweid="117" cwename="Improper Output Neutralization for Logs" pcirelated="true" owasp="1027" owasp2013="929" certjava="1134"><description><text text="A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible." /></description><staticflaws><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="75" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="28" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccountMovements$0(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="73" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="29" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccountMovements$1(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="71" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="30" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccountMovements$2(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="56" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable ibsCode. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="39" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccounts$3(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="66" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="39" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccounts$3(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="40" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="40" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccounts$4(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="29" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="41" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccounts$5(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="1" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable ibsCode. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="41" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccounts$5(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="17" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="50" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccount$6(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="80" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="74" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="51" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccount$7(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="41" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountConnectorImpl.java" line="52" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.AccountConnectorImpl" functionprototype="void lambda$findAccount$8(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="54" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountMovementServiceImpl.java" line="41" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/movement/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.movement.service.impl.AccountMovementServiceImpl" functionprototype="org.reactivestreams.Publisher lambda$findMovements$1(jarvis.core.model.HttpHeadersRequest, java.lang.Throwable)" functionrelativelocation="24" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="48" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountServiceImpl.java" line="50" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.AccountServiceImpl" functionprototype="reactor.core.publisher.Flux findAccounts(security.UserSession, jarvis.core.model.HttpHeadersRequest, java.util.Map)" functionrelativelocation="12" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="25" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AccountServiceImpl.java" line="63" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.AccountServiceImpl" functionprototype="void lambda$findAccounts$2(security.UserSession, reactor.core.publisher.SignalType)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="105" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="33" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCards$0(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Boolean, org.reactivestreams.Subscription)" functionrelativelocation="80" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="16" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="34" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCards$1(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="61" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable ibsCode. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="35" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCards$2(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="39" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="35" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCards$2(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="72" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="45" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardTransactions$3(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="7" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="46" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardTransactions$4(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="83" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="76" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="47" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardTransactions$5(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="44" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="54" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardBilling$6(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="55" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="55" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardBilling$7(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="83" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="59" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="56" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardBilling$8(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="102" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="64" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardBilling$9(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="92" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="65" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardBilling$10(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="83" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="104" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="66" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardBilling$11(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="103" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="73" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardByCardNumber$12(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="79" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="74" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardByCardNumber$13(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="83" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="87" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardConnectorImpl.java" line="75" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.CreditCardConnectorImpl" functionprototype="void lambda$findCreditCardByCardNumber$14(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="80" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardController.java" line="61" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/web/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.web.CreditCardController" functionprototype="void lambda$findCards$0(java.time.Instant, jarvis.core.model.HttpHeadersRequest, reactor.core.publisher.SignalType)" functionrelativelocation="83" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="98" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardController.java" line="79" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/web/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.web.CreditCardController" functionprototype="void lambda$findCardById$1(java.time.Instant, jarvis.core.model.HttpHeadersRequest, reactor.core.publisher.SignalType)" functionrelativelocation="83" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="93" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardServiceImpl.java" line="40" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.CreditCardServiceImpl" functionprototype="void lambda$findCreditCards$0(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="78" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable ibsCode. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardServiceImpl.java" line="40" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.CreditCardServiceImpl" functionprototype="void lambda$findCreditCards$0(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="84" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardServiceImpl.java" line="49" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.CreditCardServiceImpl" functionprototype="void lambda$findCreditCards$3(jarvis.core.model.HttpHeadersRequest, java.lang.String, reactor.core.publisher.SignalType)" functionrelativelocation="80" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="91" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardServiceImpl.java" line="68" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.CreditCardServiceImpl" functionprototype="void lambda$findCreditCardByProductId$5(jarvis.core.model.HttpHeadersRequest, security.UserSession, java.lang.Throwable)" functionrelativelocation="83" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="85" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardServiceImpl.java" line="76" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.CreditCardServiceImpl" functionprototype="void lambda$findCreditCardByProductId$7(jarvis.core.model.HttpHeadersRequest, security.UserSession, java.lang.Throwable)" functionrelativelocation="83" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="81" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="60" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="void lambda$findCreditCards$1(jarvis.core.model.HttpHeadersRequest, security.UserSession, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="83" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="60" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="void lambda$findCreditCards$1(jarvis.core.model.HttpHeadersRequest, security.UserSession, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="97" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="92" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="void lambda$findCreditCards$7(jarvis.core.model.HttpHeadersRequest, security.UserSession, reactor.core.publisher.SignalType)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="99" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="92" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="void lambda$findCreditCards$7(jarvis.core.model.HttpHeadersRequest, security.UserSession, reactor.core.publisher.SignalType)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="100" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="105" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="void lambda$findCreditCardById$8(jarvis.core.model.HttpHeadersRequest, security.UserSession, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="86" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="105" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="void lambda$findCreditCardById$8(jarvis.core.model.HttpHeadersRequest, security.UserSession, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="90" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="113" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="void lambda$findCreditCardById$11(jarvis.core.model.HttpHeadersRequest, security.UserSession, reactor.core.publisher.SignalType)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="94" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="113" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="void lambda$findCreditCardById$11(jarvis.core.model.HttpHeadersRequest, security.UserSession, reactor.core.publisher.SignalType)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="82" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable idRequest. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="120" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="boolean errorFindCardById(java.lang.Throwable, java.lang.String)" functionrelativelocation="38" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="101" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable idRequest. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardsServiceImpl.java" line="123" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.service.impl.CreditCardsServiceImpl" functionprototype="boolean errorFindCardById(java.lang.Throwable, java.lang.String)" functionrelativelocation="84" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="77" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar/jarvis-core-starter-web-1.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CustomExceptionHandler.java" line="79" sourcefilepath="pe/pichincha/jarvis/web/interceptor/" scope="pe.pichincha.jarvis.web.interceptor.CustomExceptionHandler" functionprototype="core.exception.JarvisException handleCustomException(java.lang.Exception, org.springframework.http.server.reactive.ServerHttpResponse, org.springframework.http.server.reactive.ServerHttpRequest)" functionrelativelocation="86" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="38" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar/jarvis-core-starter-web-1.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable systemCode. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CustomExceptionHandler.java" line="316" sourcefilepath="pe/pichincha/jarvis/web/interceptor/" scope="pe.pichincha.jarvis.web.interceptor.CustomExceptionHandler" functionprototype="core.http.errorcatalog.model.SystemError getSystemError(java.lang.String)" functionrelativelocation="8" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="57" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar/jarvis-core-starter-web-1.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CustomExceptionHandler.java" line="320" sourcefilepath="pe/pichincha/jarvis/web/interceptor/" scope="pe.pichincha.jarvis.web.interceptor.CustomExceptionHandler" functionprototype="void lambda$getSystemError$9(java.lang.String, java.lang.Throwable)" functionrelativelocation="79" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="22" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar/jarvis-core-starter-web-1.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable error. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CustomExceptionHandler.java" line="320" sourcefilepath="pe/pichincha/jarvis/web/interceptor/" scope="pe.pichincha.jarvis.web.interceptor.CustomExceptionHandler" functionprototype="void lambda$getSystemError$9(java.lang.String, java.lang.Throwable)" functionrelativelocation="79" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="8" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExchangeRateServiceImpl.java" line="29" sourcefilepath="pe/pichincha/services/channel/dataretrieve/exchangerate/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.exchangerate.service.impl.ExchangeRateServiceImpl" functionprototype="reactor.core.publisher.Mono findExchangeRate(security.UserSession, jarvis.core.model.HttpHeadersRequest)" functionrelativelocation="11" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="9" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JarvisCache.java" line="39" sourcefilepath="pe/pichincha/services/channel/dataretrieve/security/" scope="pe.pichincha.services.channel.dataretrieve.security.JarvisCache" functionprototype="void put(java.lang.String, java.lang.String, java.lang.String, java.lang.Object)" functionrelativelocation="38" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="31" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JarvisCache.java" line="48" sourcefilepath="pe/pichincha/services/channel/dataretrieve/security/" scope="pe.pichincha.services.channel.dataretrieve.security.JarvisCache" functionprototype="java.lang.Object getFromTypeReference(java.lang.String, java.lang.String, java.lang.String, com.fasterxml.jackson.core.type.TypeReference)" functionrelativelocation="18" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="30" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable key. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JarvisCache.java" line="54" sourcefilepath="pe/pichincha/services/channel/dataretrieve/security/" scope="pe.pichincha.services.channel.dataretrieve.security.JarvisCache" functionprototype="java.lang.Object getFromTypeReference(java.lang.String, java.lang.String, java.lang.String, com.fasterxml.jackson.core.type.TypeReference)" functionrelativelocation="64" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="2" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JarvisCache.java" line="58" sourcefilepath="pe/pichincha/services/channel/dataretrieve/security/" scope="pe.pichincha.services.channel.dataretrieve.security.JarvisCache" functionprototype="java.lang.Object getFromTypeReference(java.lang.String, java.lang.String, java.lang.String, com.fasterxml.jackson.core.type.TypeReference)" functionrelativelocation="93" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="49" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="27" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoans$0(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="15" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable personID. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="27" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoans$0(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="58" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="28" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoans$1(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="50" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="29" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoans$2(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="18" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable personID. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="29" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoans$2(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="28" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="37" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoanById$3(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.String, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="82" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="14" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="38" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoanById$4(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="46" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable loanId. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="39" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoanById$5(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="11" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanConnectorImpl.java" line="39" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.connector.impl.LoanConnectorImpl" functionprototype="void lambda$findLoanById$5(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="3" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable personId. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanServiceImpl.java" line="50" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.LoanServiceImpl" functionprototype="reactor.core.publisher.Flux findLoans(java.lang.String, jarvis.core.model.HttpHeadersRequest, java.util.Map)" functionrelativelocation="11" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="27" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable personId. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanServiceImpl.java" line="59" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.LoanServiceImpl" functionprototype="void lambda$findLoans$2(java.lang.String, reactor.core.publisher.SignalType)" functionrelativelocation="53" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="62" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanServiceImpl.java" line="83" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.LoanServiceImpl" functionprototype="void lambda$null$9(security.UserSession)" functionrelativelocation="29" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="10" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanServiceImpl.java" line="87" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.LoanServiceImpl" functionprototype="org.reactivestreams.Publisher lambda$null$10(jarvis.core.model.HttpHeadersRequest, java.lang.Throwable)" functionrelativelocation="36" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="20" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoanServiceImpl.java" line="123" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.LoanServiceImpl" functionprototype="reactor.core.publisher.Mono lambda$null$16(jarvis.core.model.HttpHeadersRequest, java.lang.Throwable)" functionrelativelocation="36" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="32" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MovementManager.java" line="39" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/movement/manager/" scope="pe.pichincha.services.channel.dataretrieve.product.movement.manager.MovementManager" functionprototype="void lambda$findMovements$2(jarvis.core.model.HttpHeadersRequest, java.lang.String, security.UserSession, org.reactivestreams.Subscription)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="21" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductServiceImpl.java" line="53" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.ProductServiceImpl" functionprototype="void lambda$findProducts$1(jarvis.core.model.HttpHeadersRequest, security.UserSession, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="24" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductServiceImpl.java" line="53" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.ProductServiceImpl" functionprototype="void lambda$findProducts$1(jarvis.core.model.HttpHeadersRequest, security.UserSession, org.reactivestreams.Subscription)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="60" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductServiceImpl.java" line="63" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.ProductServiceImpl" functionprototype="void lambda$null$3(jarvis.core.model.HttpHeadersRequest, java.util.concurrent.atomic.AtomicInteger, java.lang.Throwable, java.lang.Object)" functionrelativelocation="71" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="37" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable userSession.getIbsCode(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductServiceImpl.java" line="95" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.ProductServiceImpl" functionprototype="reactor.core.publisher.Flux findAccountAllowedToTransfer(security.UserSession, jarvis.core.model.HttpHeadersRequest)" functionrelativelocation="19" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="51" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductServiceImpl.java" line="98" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/service/impl/" scope="pe.pichincha.services.channel.dataretrieve.product.service.impl.ProductServiceImpl" functionprototype="void lambda$findAccountAllowedToTransfer$7(jarvis.core.model.HttpHeadersRequest, security.UserSession, reactor.core.publisher.SignalType)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="36" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="36" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findExchangeRate$0(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="33" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable ibs. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="36" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findExchangeRate$0(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="67" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="37" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findExchangeRate$1(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="53" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable ibs. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="38" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findExchangeRate$2(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="34" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="38" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findExchangeRate$2(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="19" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="46" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findPerson$3(jarvis.core.model.HttpHeadersRequest, java.lang.String, org.reactivestreams.Subscription)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="35" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\[...\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="47" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findPerson$4(jarvis.core.model.HttpHeadersRequest, java.lang.String, java.lang.Throwable)" functionrelativelocation="81" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="23" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="48" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findPerson$5(jarvis.core.model.HttpHeadersRequest, java.lang.String)" functionrelativelocation="62" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="63" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="58" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findProductsConfig$6(jarvis.core.model.HttpHeadersRequest, org.reactivestreams.Subscription)" functionrelativelocation="60" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="52" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="59" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findProductsConfig$7(jarvis.core.model.HttpHeadersRequest, java.lang.Throwable)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="69" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="60" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findProductsConfig$8(jarvis.core.model.HttpHeadersRequest)" functionrelativelocation="60" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="88" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="69" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findBinCards$9(jarvis.core.model.HttpHeadersRequest, org.reactivestreams.Subscription)" functionrelativelocation="60" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="95" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="70" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findBinCards$10(jarvis.core.model.HttpHeadersRequest, java.lang.Throwable)" functionrelativelocation="68" /><flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="89" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.slf4j.Logger.debug" description="This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable headersRequest.getRequestId(). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only create a custom blocklist when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/117.html) &#xd;&#xa;OWASP (https://www.owasp.org/index.php/Log_injection) &#xd;&#xa;WASC (https://webappsec.pbworks.com/Improper-Output-Handling) &#xd;&#xa;Supported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserPreferenceConnectorImpl.java" line="71" sourcefilepath="pe/pichincha/services/channel/dataretrieve/userpreference/connector/impl/" scope="pe.pichincha.services.channel.dataretrieve.userpreference.connector.impl.UserPreferenceConnectorImpl" functionprototype="void lambda$findBinCards$11(jarvis.core.model.HttpHeadersRequest)" functionrelativelocation="60" /></staticflaws></cwe></category><category categoryid="10" categoryname="Credentials Management" pcirelated="true"><desc><para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk." /><para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &quot;secret,&quot; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice." /></desc><recommendations><para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files." /></recommendations><cwe cweid="259" cwename="Use of Hard-coded Password" pcirelated="true" owasp="1028" owasp2013="930" sans="798" owaspmobile="3034" certjava="1152"><description><text text="A method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack." /></description><staticflaws><flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="106" module="springfox-swagger-ui-3_mapfile_swagger-ui-bundle.js.map.jsa" type="set" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. set&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/259.html)&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="oauth2.jsx" line="104" sourcefilepath="/src/core/components/auth/" scope="^::!main::render" functionprototype="!js_object !func(!js_object, ...)" functionrelativelocation="-1" /></staticflaws></cwe></category><category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true"><desc><para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack." /><para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  " /><para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  " /></desc><recommendations><para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed." /></recommendations><cwe cweid="327" cwename="Use of a Broken or Risky Cryptographic Algorithm" pcirelated="true" owasp="1029" owasp2013="934" sans="866" owaspmobile="3035" certc="1170" certcpp="883" certjava="1152"><description><text text="The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the disclosure of sensitive information." /></description><staticflaws><flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="96" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.apache.commons.codec.digest.DigestUtils.md5Hex" description="This function uses the org.apache.commons.codec.digest.DigestUtils.md5Hex() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/327.html)&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2021-05-20 22:32:51 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CreditCardMapper.java" line="50" sourcefilepath="pe/pichincha/services/channel/dataretrieve/creditcard/mapper/" scope="pe.pichincha.services.channel.dataretrieve.creditcard.mapper.CreditCardMapper" functionprototype="model.CreditCardResponseDto mapToCreditCardDto(product.client.creditcard.CreditCardBO, product.model.ProductConfig, product.helper.ProductHelper)" functionrelativelocation="99" /><flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="4" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.apache.commons.codec.digest.DigestUtils.md5Hex" description="This function uses the org.apache.commons.codec.digest.DigestUtils.md5Hex() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/327.html)&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductMapper.java" line="80" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/mapper/" scope="pe.pichincha.services.channel.dataretrieve.product.mapper.ProductMapper" functionprototype="model.Account mapToAccount(client.account.AccountBO, model.ProductConfig)" functionrelativelocation="84" /><flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="64" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.apache.commons.codec.digest.DigestUtils.md5Hex" description="This function uses the org.apache.commons.codec.digest.DigestUtils.md5Hex() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/327.html)&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductMapper.java" line="134" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/mapper/" scope="pe.pichincha.services.channel.dataretrieve.product.mapper.ProductMapper" functionprototype="model.LoanResponse mapToLoan(client.loan.LoanBO, boolean, java.lang.String  [], java.util.Map)" functionrelativelocation="99" /><flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="12" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.apache.commons.codec.digest.DigestUtils.md5Hex" description="This function uses the org.apache.commons.codec.digest.DigestUtils.md5Hex() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/327.html)&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductMapper.java" line="161" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/mapper/" scope="pe.pichincha.services.channel.dataretrieve.product.mapper.ProductMapper" functionprototype="model.ProductDto mapFromCreditCardToProduct(client.creditcard.CreditCardBO, model.ProductConfig)" functionrelativelocation="27" /><flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="70" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.apache.commons.codec.digest.DigestUtils.md5Hex" description="This function uses the org.apache.commons.codec.digest.DigestUtils.md5Hex() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/327.html)&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductMapper.java" line="251" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/mapper/" scope="pe.pichincha.services.channel.dataretrieve.product.mapper.ProductMapper" functionprototype="model.ProductDto mapFromAccountToProduct(client.account.AccountBO, model.ProductConfig)" functionrelativelocation="64" /><flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="45" module="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar" type="org.apache.commons.codec.digest.DigestUtils.md5Hex" description="This function uses the org.apache.commons.codec.digest.DigestUtils.md5Hex() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References: &#xd;&#xa;CWE (https://cwe.mitre.org/data/definitions/327.html)&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2021-02-26 17:24:09 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2021-05-21 18:47:26 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ProductMapper.java" line="297" sourcefilepath="pe/pichincha/services/channel/dataretrieve/product/mapper/" scope="pe.pichincha.services.channel.dataretrieve.product.mapper.ProductMapper" functionprototype="model.ProductDto mapFromLoanToProduct(client.loan.LoanBO, model.ProductConfig)" functionrelativelocation="88" /></staticflaws></cwe></category></severity><severity level="2" /><severity level="1" /><severity level="0" /><flaw-status new="97" reopen="0" open="0" cannot-reproduce="0" fixed="0" total="97" not_mitigated="97" sev-1-change="0" sev-2-change="0" sev-3-change="97" sev-4-change="0" sev-5-change="0" /><customfields><customfield name="Custom 1" value="" /><customfield name="Custom 2" value="" /><customfield name="Custom 3" value="" /><customfield name="Custom 4" value="" /><customfield name="Custom 5" value="" /><customfield name="Custom 6" value="" /><customfield name="Custom 7" value="" /><customfield name="Custom 8" value="" /><customfield name="Custom 9" value="" /><customfield name="Custom 10" value="" /></customfields><software_composition_analysis third_party_components="128" violate_policy="false" components_violated_policy="0"><vulnerable_components><component component_id="03424e6d-f7f8-4a9b-9e4d-a6a9b20ef9b6" file_name="nio-multipart-parser-1.1.0.jar" sha1="c6c417fec6612584b1c34d4dd98c5a4e47e8c754" vulnerabilities="0" max_cvss_score="" version="1.1.0" library="nio-multipart-parser" library_id="maven:org.synchronoss.cloud:nio-multipart-parser:1.1.0:" vendor="org.synchronoss.cloud" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/nio-multipart-parser-1.1.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="07e4caa4-059e-41ae-80c4-cfd450098a63" file_name="LatencyUtils-2.0.3.jar" sha1="769c0b82cb2421c8256300e907298a9410a2a3d3" vulnerabilities="0" max_cvss_score="" version="2.0.3" library="LatencyUtils" library_id="maven:org.latencyutils:LatencyUtils:2.0.3:" vendor="org.latencyutils" description="LatencyUtils is a package that provides latency recording and reporting utilities." added_date="2021-05-21 18:44:40 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/LatencyUtils-2.0.3.jar" /></file_paths><licenses><license name="Creative Commons Attribution 3.0" spdx_id="CC-BY-3.0" license_url="https://spdx.org/licenses/CC-BY-3.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="07fe056d-e38e-4116-b3cf-8f33ed3edf85" file_name="spring-webflux-5.1.7.RELEASE.jar" sha1="0fa59fe8d7a3cfc7c20bfc0c916a5ae4755af3c6" vulnerabilities="1" max_cvss_score="7.6" version="5.1.7.RELEASE" library="spring-webflux" library_id="maven:org.springframework:spring-webflux:5.1.7.RELEASE:" vendor="org.springframework" description="Spring WebFlux" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-webflux-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2020-5398" cvss_score="7.6" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="spring-web is vulnerable to reflected file download. The filename attribute that is derived from the user-supplied `Content-Disposition` header is not validated and sanitized, potentially resulting in the downloaded content of the response to be saved and executed as a file by the user's browser. " severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="08f2b1ca-02a4-405b-861c-f72ae040fac1" file_name="jboss-logging-3.3.2.Final.jar" sha1="3789d00e859632e6c6206adc0c71625559e6e3b0" vulnerabilities="0" max_cvss_score="" version="3.3.2.Final" library="jboss-logging" library_id="maven:org.jboss.logging:jboss-logging:3.3.2.Final:" vendor="org.jboss.logging" description="The JBoss Logging Framework" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jboss-logging-3.3.2.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="091f0a2c-0c8b-47b3-a49c-b8e19bf5ee4d" file_name="dozer-core-6.0.0.jar" sha1="9419662bb83d6e8eba9b6249f18cd42aed68f826" vulnerabilities="0" max_cvss_score="" version="6.0.0" library="dozer-core" library_id="maven:com.github.dozermapper:dozer-core:6.0.0:" vendor="com.github.dozermapper" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/dozer-core-6.0.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="0b27f076-30a4-460d-84d2-f5701c7ae38c" file_name="commons-beanutils-1.9.3.jar" sha1="c845703de334ddc6b4b3cd26835458cb1cba1f3d" vulnerabilities="2" max_cvss_score="7.5" version="1.9.3" library="commons-beanutils" library_id="maven:commons-beanutils:commons-beanutils:1.9.3:" vendor="commons-beanutils" description="Apache Commons BeanUtils provides an easy-to-use but flexible wrapper around reflection and introspection." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/commons-beanutils-1.9.3.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2014-0114" cvss_score="7.5" severity="4" cwe_id="CWE-20" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to &quot;manipulate&quot; the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-10086" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="commons-beanutils2 is vulnerable to authorization bypass. The vulnerability exists as the class property of Java objects are able to get access to the classloader by default." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="0b2a75d4-9901-41c2-92b8-3aeb652d004d" file_name="commons-collections-3.2.2.jar" sha1="8ad72fe39fa8c91eaaf12aadb21e0c3661fe26d5" vulnerabilities="0" max_cvss_score="" version="3.2.2" library="commons-collections" library_id="maven:commons-collections:commons-collections:3.2.2:" vendor="commons-collections" description="Types that extend and augment the Java Collections Framework." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/commons-collections-3.2.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="0b437ce6-19cd-4b3b-8aac-fbc9a4c9c814" file_name="vavr-match-0.9.3.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="0.9.3" library="vavr-match" library_id="maven:io.vavr:vavr-match:0.9.3:" vendor="io.vavr" description="Annotation for structural pattern matching." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/vavr-match-0.9.0.jar:vavr-match-0.9.3.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="0c1ae895-2b0a-4a2e-8f63-58ea1ad73e7f" file_name="adapter-rxjava2-2.5.0.jar" sha1="928e129ee8a07ab97270523c48eec85ca16b4e3a" vulnerabilities="0" max_cvss_score="" version="2.5.0" library="adapter-rxjava2" library_id="maven:com.squareup.retrofit2:adapter-rxjava2:2.5.0:" vendor="com.squareup.retrofit2" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/adapter-rxjava2-2.5.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="0ddf92dd-1c3c-4852-a753-3e2a22fe76d1" file_name="log4j-to-slf4j-2.11.2.jar" sha1="6d37bf7b046c0ce2669f26b99365a2cfa45c4c18" vulnerabilities="0" max_cvss_score="" version="2.11.2" library="log4j-to-slf4j" library_id="maven:org.apache.logging.log4j:log4j-to-slf4j:2.11.2:" vendor="org.apache.logging.log4j" description="The Apache Log4j binding between Log4j 2 API and SLF4J." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/log4j-to-slf4j-2.11.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="0fb75098-0afa-45ae-9203-bb2908685ec0" file_name="commons-io-2.5.jar" sha1="2852e6e05fbb95076fc091f6d1780f1f8fe35e0f" vulnerabilities="1" max_cvss_score="5.0" version="2.5" library="commons-io" library_id="maven:commons-io:commons-io:2.5:" vendor="commons-io" description="The Apache Commons IO library contains utility classes, stream implementations, file filters, &#xa;file comparators, endian transformation classes, and much more." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/commons-io-2.5.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2021-29425" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:39 UTC" cve_summary="commons-io is vulnerable to directory traversal. Invoking the method `FileNameUtils.normalize` with a malicious input string would potentially allow access to files within the parent directory." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="100cf951-9cb0-4053-b7b1-d13c72439bdb" file_name="netty-codec-socks-4.1.36.Final.jar" sha1="054bedfd0bec809898d5b8ff9cb9f3f9e427e967" vulnerabilities="0" max_cvss_score="" version="4.1.36.Final" library="netty-codec-socks" library_id="maven:io.netty:netty-codec-socks:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-codec-socks-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="14ebad94-0887-4d97-971c-43a91935f0f5" file_name="spring-cloud-context-2.1.1.RELEASE.jar" sha1="fe737c531cafb79a14579a7a3730f91ba460541e" vulnerabilities="0" max_cvss_score="" version="2.1.1.RELEASE" library="spring-cloud-context" library_id="maven:org.springframework.cloud:spring-cloud-context:2.1.1.RELEASE:" vendor="org.springframework.cloud" description="Spring Cloud Context" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-cloud-context-2.1.1.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="17499537-026d-4a90-955e-01c3c973f198" file_name="reactive-streams-1.0.2.jar" sha1="323964c36556eb0e6209f65c1cef72b53b461ab8" vulnerabilities="0" max_cvss_score="" version="1.0.2" library="reactive-streams" library_id="maven:org.reactivestreams:reactive-streams:1.0.2:" vendor="org.reactivestreams" description="A Protocol for Asynchronous Non-Blocking Data Sequence" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/reactive-streams-1.0.2.jar" /></file_paths><licenses><license name="Creative Commons Attribution 3.0" spdx_id="CC-BY-3.0" license_url="https://spdx.org/licenses/CC-BY-3.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="174fa747-812f-4db8-bf50-6856757e08c4" file_name="netty-transport-native-unix-common-4.1.36.Final.jar" sha1="d95d7033f400f9472db9da7834c443b96cd4bab0" vulnerabilities="0" max_cvss_score="" version="4.1.36.Final" library="netty-transport-native-unix-common" library_id="maven:io.netty:netty-transport-native-unix-common:4.1.36.Final:" vendor="io.netty" description="Static library which contains common unix utilities." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-transport-native-unix-common-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="18dc258f-6d3a-45cc-aec3-e5c94239915c" file_name="chronicle-3.4.2.jar" sha1="03c0ee62c189d4e07c875a13d47a97a9a10e28bf" vulnerabilities="0" max_cvss_score="" version="3.4.2" library="chronicle" library_id="maven:net.openhft:chronicle:3.4.2:" vendor="net.openhft" description="Java library for persisted low latency messaging (Java 6+)" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/chronicle-3.4.2.jar" /></file_paths><licenses><license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https://spdx.org/licenses/GPL-3.0-only.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="19aea0da-8e0b-4edc-8ce8-3265bc41237b" file_name="annotations-13.0.jar" sha1="919f0dfe192fb4e063e7dacadee7f8bb9a2672a9" vulnerabilities="0" max_cvss_score="" version="13.0" library="annotations" library_id="maven:org.jetbrains:annotations:13.0:" vendor="org.jetbrains" description="A set of annotations used for code inspection support and code documentation." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/annotations-13.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="1bc25c1e-232d-496c-b23d-d750b47f54f8" file_name="spring-cloud-starter-config-2.1.1.RELEASE.jar" sha1="5a2d37db1915dff22941c5652ae380401675e731" vulnerabilities="0" max_cvss_score="" version="2.1.1.RELEASE" library="spring-cloud-starter-config" library_id="maven:org.springframework.cloud:spring-cloud-starter-config:2.1.1.RELEASE:" vendor="org.springframework.cloud" description="Spring Cloud Starter" added_date="2021-05-21 18:44:40 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-cloud-starter-config-2.1.1.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="1eadac74-ad4b-46ec-b904-4680224db2c5" file_name="spring-boot-starter-actuator-2.1.5.RELEASE.jar" sha1="4abebc4ec0ee87155bfa8daf6a9d63366308e58a" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-starter-actuator" library_id="maven:org.springframework.boot:spring-boot-starter-actuator:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Starter for using Spring Boot's Actuator which provides production&#xa;&#x9;&#x9;ready features to help you monitor and manage your application" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-starter-actuator-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="1fc9f5e1-4fd3-4741-a3f2-88139a6042a1" file_name="guava-20.0.jar" sha1="89507701249388e1ed5ddcf8c41f4ce1be7831ef" vulnerabilities="2" max_cvss_score="4.3" version="20.0" library="guava" library_id="maven:com.google.guava:guava:20.0:" vendor="com.google.guava" description="Guava is a suite of core and expanded libraries that include&#xa;    utility classes, google's collections, io classes, and much&#xa;    much more.&#xa;&#xa;    Guava has only one code dependency - javax.annotation,&#xa;    per the JSR-305 spec." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/guava-20.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2018-10237" cvss_score="4.3" severity="3" cwe_id="CWE-502" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="Unbounded memory allocation in Google Guava 11.0 through 24.x before 24.1.1 allows remote attackers to conduct denial of service attacks against servers that depend on this library and deserialize attacker-provided data, because the AtomicDoubleArray class (when serialized with Java serialization) and the CompoundOrdering class (when serialized with GWT serialization) perform eager allocation without appropriate checks on what a client has sent and whether the data size is reasonable." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-8908" cvss_score="2.1" severity="2" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="guava is vulnerable to information disclosure. A folder with insecure permissions is created by the function `com.google.common.io.Files.createTempDir`. A local user will be able to steal secrets stored in this directory." severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="233fc480-401c-423d-bb9a-22b9bb4bdff1" file_name="spring-boot-autoconfigure-2.1.5.RELEASE.jar" sha1="69ae2819b295603563b95f79abae53f2631c5b94" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-autoconfigure" library_id="maven:org.springframework.boot:spring-boot-autoconfigure:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Spring Boot AutoConfigure" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-autoconfigure-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="259516b4-9653-4d15-a63a-d023583dcdda" file_name="resilience4j-retrofit-0.13.2.jar" sha1="097bd7f5cbd0dc148d1b65c419812ccd4121e16a" vulnerabilities="0" max_cvss_score="" version="0.13.2" library="resilience4j-retrofit" library_id="maven:io.github.resilience4j:resilience4j-retrofit:0.13.2:" vendor="io.github.resilience4j" description="Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/resilience4j-retrofit-0.13.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="26f67872-358f-4d0e-9d34-e76b50f559f2" file_name="reactor-core-3.2.9.RELEASE.jar" sha1="a4c759ef932c530eaaad73e2544739bee9530903" vulnerabilities="0" max_cvss_score="" version="3.2.9.RELEASE" library="reactor-core" library_id="maven:io.projectreactor:reactor-core:3.2.9.RELEASE:" vendor="io.projectreactor" description="Non-Blocking Reactive Foundation for the JVM" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/reactor-core-3.2.9.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="2890cb4a-c5cf-42a6-a10e-15c4d9362b65" file_name="reactor-test-3.2.9.RELEASE.jar" sha1="f22f3d0ec7ff7be79086bfcb68d6dd93fc918f93" vulnerabilities="0" max_cvss_score="" version="3.2.9.RELEASE" library="reactor-test" library_id="maven:io.projectreactor:reactor-test:3.2.9.RELEASE:" vendor="io.projectreactor" description="Reactor Test support" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/reactor-test-3.2.9.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="2965af2d-756e-4898-aadc-66ab5dbde5fb" file_name="netty-resolver-4.1.36.Final.jar" sha1="e4d243fbf4e6837fa294f892bf97149e18129100" vulnerabilities="0" max_cvss_score="" version="4.1.36.Final" library="netty-resolver" library_id="maven:io.netty:netty-resolver:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-resolver-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="2c4b493b-27cf-4a47-a549-7e5eb23172d0" file_name="swagger-models-1.5.20.jar" sha1="fb3a23bad80c5ed84db9dd150db2cba699531458" vulnerabilities="0" max_cvss_score="" version="1.5.20" library="swagger-models" library_id="maven:io.swagger:swagger-models:1.5.20:" vendor="io.swagger" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/swagger-models-1.5.20.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="2d6e77ee-75bf-4abe-a7e2-7f7ea1615b4c" file_name="spring-webmvc-5.1.7.RELEASE.jar" sha1="686326ff513bf4e852b3ee359cf741d92ab82cfe" vulnerabilities="1" max_cvss_score="7.6" version="5.1.7.RELEASE" library="spring-webmvc" library_id="maven:org.springframework:spring-webmvc:5.1.7.RELEASE:" vendor="org.springframework" description="Spring Web MVC" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-webmvc-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2020-5398" cvss_score="7.6" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="spring-web is vulnerable to reflected file download. The filename attribute that is derived from the user-supplied `Content-Disposition` header is not validated and sanitized, potentially resulting in the downloaded content of the response to be saved and executed as a file by the user's browser. " severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="30852588-309b-4b72-a667-37e3c8c826d3" file_name="jackson-annotations-2.9.0.jar" sha1="07c10d545325e3a6e72e06381afe469fd40eb701" vulnerabilities="0" max_cvss_score="" version="2.9.0" library="jackson-annotations" library_id="maven:com.fasterxml.jackson.core:jackson-annotations:2.9.0:" vendor="com.fasterxml.jackson.core" description="Core annotations used for value types, used by Jackson data binding package." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jackson-annotations-2.9.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="308daedf-d642-4a2d-b28f-57d0b9f1fe2c" file_name="annotations-7.0.3.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="7.0.3" library="annotations" library_id="maven:com.intellij:annotations:7.0.3:" vendor="com.intellij" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/annotations-9.0.jar:annotations-7.0.3.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="31b5df9e-068c-4f55-bb3c-a24d28b72795" file_name="spring-core-5.1.7.RELEASE.jar" sha1="280f821b9ed4dad9993f1d551d6e86557092ae58" vulnerabilities="0" max_cvss_score="" version="5.1.7.RELEASE" library="spring-core" library_id="maven:org.springframework:spring-core:5.1.7.RELEASE:" vendor="org.springframework" description="Spring Core" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-core-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="33b0bd13-201f-4417-ad18-5a134e024922" file_name="spring-beans-5.1.7.RELEASE.jar" sha1="14cd651e4aa3514e75710c9450c7a0c89413e63f" vulnerabilities="0" max_cvss_score="" version="5.1.7.RELEASE" library="spring-beans" library_id="maven:org.springframework:spring-beans:5.1.7.RELEASE:" vendor="org.springframework" description="Spring Beans" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-beans-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="349d295a-9cdf-4f60-af6d-703c2ef0a6b6" file_name="micrometer-core-1.1.4.jar" sha1="96eabfe2343a4a4676d215b2122cbbc4d4b6af9b" vulnerabilities="0" max_cvss_score="" version="1.1.4" library="micrometer-core" library_id="maven:io.micrometer:micrometer-core:1.1.4:" vendor="io.micrometer" description="Application monitoring instrumentation facade" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/micrometer-core-1.1.4.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="38f8ac58-91a8-4a6c-b800-28603e800559" file_name="hazelcast-client-3.11.1.jar" sha1="c5bdceb71ce83371c237125940169e2f74520fb5" vulnerabilities="0" max_cvss_score="" version="3.11.1" library="hazelcast-client" library_id="maven:com.hazelcast:hazelcast-client:3.11.1:" vendor="com.hazelcast" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/hazelcast-client-3.11.1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="395dad29-eb7c-4733-97d7-bfdc01afcdec" file_name="vavr-match-0.9.0.jar" sha1="454a1d2167c6dd46d3536b8d5db1b78fbc4a2c91" vulnerabilities="0" max_cvss_score="" version="0.9.0" library="vavr-match" library_id="maven:io.vavr:vavr-match:0.9.0:" vendor="io.vavr" description="Annotation and processor for structural pattern matching." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/vavr-match-0.9.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="3d43379f-0849-42e9-82d7-b64c4eb20f1a" file_name="jackson-datatype-jsr310-2.9.8.jar" sha1="28ad1bced632ba338e51c825a652f6e11a8e6eac" vulnerabilities="0" max_cvss_score="" version="2.9.8" library="jackson-datatype-jsr310" library_id="maven:com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8:" vendor="com.fasterxml.jackson.datatype" description="Add-on module to support JSR-310 (Java 8 Date &amp; Time API) data types." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jackson-datatype-jsr310-2.9.8.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="3f5ffd5c-578f-4413-a833-af95d515e392" file_name="jna-4.5.2.jar" sha1="35d000afbaa4ed425d91873b40f4df9b8236875b" vulnerabilities="0" max_cvss_score="" version="4.5.2" library="jna" library_id="maven:net.java.dev.jna:jna:4.5.2:" vendor="net.java.dev.jna" description="Java Native Access" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jna-4.5.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /><license name="GNU Lesser General Public License v2.1 only" spdx_id="LGPL-2.1-only" license_url="https://spdx.org/licenses/LGPL-2.1-only.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="40f0ff9a-c73d-441d-bc2e-246c073000f9" file_name="kotlin-stdlib-1.2.71.jar" sha1="d9717625bb3c731561251f8dd2c67a1011d6764c" vulnerabilities="0" max_cvss_score="" version="1.2.71" library="kotlin-stdlib" library_id="maven:org.jetbrains.kotlin:kotlin-stdlib:1.2.71:" vendor="org.jetbrains.kotlin" description="Kotlin Standard Library for JVM" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/kotlin-stdlib-1.2.71.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="43ba12ec-21e5-4b1e-8856-7065f500ef40" file_name="resilience4j-ratelimiter-0.13.2.jar" sha1="e30037fad05ad43956f5e3be59fc58d415ee3b99" vulnerabilities="0" max_cvss_score="" version="0.13.2" library="resilience4j-ratelimiter" library_id="maven:io.github.resilience4j:resilience4j-ratelimiter:0.13.2:" vendor="io.github.resilience4j" description="Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/resilience4j-ratelimiter-0.13.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="43de395e-a095-46bc-ad84-0c024ec70a69" file_name="compiler-2.2.0.jar" sha1="170ee9a88d82298d6118a3ae4a450de34120c18f" vulnerabilities="0" max_cvss_score="" version="2.2.0" library="compiler" library_id="maven:net.openhft:compiler:2.2.0:" vendor="net.openhft" description="Java Runtime Compiler library." added_date="2021-05-21 18:44:40 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/compiler-2.2.0.jar" /></file_paths><licenses><license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https://spdx.org/licenses/GPL-3.0-only.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="461e30b6-d674-4ad8-973f-9b1537db30e5" file_name="resilience4j-circuitbreaker-0.13.2.jar" sha1="5acdfa68b9e491fc41005f15b524fd3d00e84c14" vulnerabilities="0" max_cvss_score="" version="0.13.2" library="resilience4j-circuitbreaker" library_id="maven:io.github.resilience4j:resilience4j-circuitbreaker:0.13.2:" vendor="io.github.resilience4j" description="Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming" added_date="2021-05-21 18:44:40 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/resilience4j-circuitbreaker-0.13.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="47004b3b-df69-4a60-a235-ac4a0e62d206" file_name="logback-classic-1.2.3.jar" sha1="7c4f3c474fb2c041d8028740440937705ebb473a" vulnerabilities="0" max_cvss_score="" version="1.2.3" library="logback-classic" library_id="maven:ch.qos.logback:logback-classic:1.2.3:" vendor="ch.qos.logback" description="logback-classic module" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/logback-classic-1.2.3.jar" /></file_paths><licenses><license name="GNU Lesser General Public License v2.1 only" spdx_id="LGPL-2.1-only" license_url="https://spdx.org/licenses/LGPL-2.1-only.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /><license name="Eclipse Public License 1.0" spdx_id="EPL-1.0" license_url="https://spdx.org/licenses/EPL-1.0.html" risk_rating="3" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="485d01ff-35d3-42f1-9ffc-ad769b1fa727" file_name="okhttp-3.12.1.jar" sha1="dc6d02e4e68514eff5631963e28ca7742ac69efe" vulnerabilities="0" max_cvss_score="" version="3.12.1" library="okhttp" library_id="maven:com.squareup.okhttp3:okhttp:3.12.1:" vendor="com.squareup.okhttp3" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/okhttp-3.12.1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="48ab1fba-76be-4b2e-9cd7-d32cb1181a7c" file_name="netty-codec-http-4.1.36.Final.jar" sha1="62b73d439dbddf3c0dde092b048580139695ab46" vulnerabilities="6" max_cvss_score="6.4" version="4.1.36.Final" library="netty-codec-http" library_id="maven:io.netty:netty-codec-http:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-codec-http-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2019-16869" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="Netty is vulnerable to HTTP request smuggling. The attack is possible because it fails to correctly handle white spaces in HTTP header names." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-20444" cvss_score="6.4" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="netty-codec-http is vulnerable to HTTP request smuggling. The library does not detect if a colon is missing when parsing HTTP headers. This allows an attacker to smuggle HTTP requests via an invalid line fold." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-20445" cvss_score="6.4" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="netty-codec-http is vulnerable to HTTP request smuggling. The library does not properly validate duplicate `Content-Length` header fields and the `Transport-Encoding` headers, allowing a remote attacker to smuggle HTTP request by submitting a malicious `Transport-Encoding` header." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2021-21290" cvss_score="1.9" severity="1" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="netty-codec-http is vulnerable to information disclosure. When netty's multipart decoders are used, local files containing confidential information can be accessed via the local system temporary directory if temporary storing uploads on the disk is enabled." severity_desc="Very Low" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="SRCCLR-SID-21787" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="netty-codec-http is vulnerable to denial of service. An `indexOutOfBoundsException` occurs when the application parses an incorrect `Content-Type` value that starts with a semi-colon `;` in a multipart form request, allowing an attacker to cause a denial of service condition." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="SRCCLR-SID-3108" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="netty-codec-http is vulnerable to denial of service (DoS) attacks. These attacks are possible because it does not respect the limit on max http header size. This is caused because control characters are indefinitely skipped and the parsing never ends." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="49ad43b8-20df-4205-938f-54819f455767" file_name="reactor-netty-0.8.8.RELEASE.jar" sha1="4343cf2fe902bb35e5bc6784024e3e254c8af8c1" vulnerabilities="3" max_cvss_score="5.0" version="0.8.8.RELEASE" library="reactor-netty" library_id="maven:io.projectreactor.netty:reactor-netty:0.8.8.RELEASE:" vendor="io.projectreactor.netty" description="Reactive Streams Netty driver" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/reactor-netty-0.8.8.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2019-11284" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="reactor-netty is vulnerable to information disclosure. Authentication/Authorization headers are passed through redirects, allowing remote unauthenticated malicious user to gain access to credentials for a different server than they have access to." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-5403" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="reactor-netty is susceptible to denial of service (DoS). The attack is possible when an attacker provide a malformed URI with double slash ( `//` characters), failing to handle the path information and end up with URISyntaxException closing connection instead of returning `400` status code." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-5404" cvss_score="4.9" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="reactor.netty is vulnerable to information disclosure. The `followRedirect` functions does not properly handle the redirect request, leading to a credential leakage if a redirect to different domain is based on the incorrect configuration." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="4b80158a-1789-4a1a-9c11-fd0081dc3b43" file_name="logging-interceptor-3.12.1.jar" sha1="f0304756a8d9f745fd7de3f82a32090cf5b71166" vulnerabilities="0" max_cvss_score="" version="3.12.1" library="logging-interceptor" library_id="maven:com.squareup.okhttp3:logging-interceptor:3.12.1:" vendor="com.squareup.okhttp3" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/logging-interceptor-3.12.1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="4ccd370f-ab44-40e8-861f-eba42cb2b28f" file_name="nio-stream-storage-1.1.3.jar" sha1="986dba5f6e5eed20f0dba6ddc8e8a64a9ebdc2f3" vulnerabilities="0" max_cvss_score="" version="1.1.3" library="nio-stream-storage" library_id="maven:org.synchronoss.cloud:nio-stream-storage:1.1.3:" vendor="org.synchronoss.cloud" description="A lightweight library to stream byte data using a combination of in memory and file storage." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/nio-stream-storage-1.1.3.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="51a7eeb9-efeb-4e5d-8a5b-90f5dd7db808" file_name="spring-boot-2.1.5.RELEASE.jar" sha1="939061a385b4e30e115978d78a7412fb984674df" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot" library_id="maven:org.springframework.boot:spring-boot:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Spring Boot" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="58dab3c5-b691-4006-9be3-91edbf87d27f" file_name="logback-core-1.2.3.jar" sha1="864344400c3d4d92dfeb0a305dc87d953677c03c" vulnerabilities="0" max_cvss_score="" version="1.2.3" library="logback-core" library_id="maven:ch.qos.logback:logback-core:1.2.3:" vendor="ch.qos.logback" description="logback-core module" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/logback-core-1.2.3.jar" /></file_paths><licenses><license name="Eclipse Public License 1.0" spdx_id="EPL-1.0" license_url="https://spdx.org/licenses/EPL-1.0.html" risk_rating="3" mitigation="false" license_affects_policy_compliance="false" /><license name="GNU Lesser General Public License v2.1 only" spdx_id="LGPL-2.1-only" license_url="https://spdx.org/licenses/LGPL-2.1-only.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="58dc43dc-a591-4864-9ca7-6fc9e2fb98e2" file_name="jackson-module-parameter-names-2.9.8.jar" sha1="c4eef0e6e20d60fb27af4bc4770dba7bcc3f6de6" vulnerabilities="0" max_cvss_score="" version="2.9.8" library="jackson-module-parameter-names" library_id="maven:com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.8:" vendor="com.fasterxml.jackson.module" description="Add-on module for Jackson (http://jackson.codehaus.org) to support&#xa;introspection of method/constructor parameter names, without having to add explicit property name annotation." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jackson-module-parameter-names-2.9.8.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="58f2af5f-92ed-4d3e-87b2-9af5d662fa5f" file_name="affinity-2.2.jar" sha1="8abd6d1d76202aa823c2d0d834f2059b1ea0192f" vulnerabilities="0" max_cvss_score="" version="2.2" library="affinity" library_id="maven:net.openhft:affinity:2.2:" vendor="net.openhft" description="Java Thread Affinity library" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/affinity-2.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /><license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https://spdx.org/licenses/GPL-3.0-only.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="59233466-04d4-4a5d-8d94-fa8cb26ed0cd" file_name="javax.annotation-api-1.3.2.jar" sha1="934c04d3cfef185a8008e7bf34331b79730a9d43" vulnerabilities="0" max_cvss_score="" version="1.3.2" library="javax.annotation-api" library_id="maven:javax.annotation:javax.annotation-api:1.3.2:" vendor="javax.annotation" description="Common Annotations for the JavaTM Platform API" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/javax.annotation-api-1.3.2.jar" /></file_paths><licenses><license name="GNU General Public License v2.0 only" spdx_id="GPL-2.0" license_url="https://spdx.org/licenses/GPL-2.0.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /><license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https://spdx.org/licenses/CDDL-1.0.html" risk_rating="3" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="5ef3a7dc-0c57-4515-8e0a-3f36fae0d659" file_name="hamcrest-core-1.3.jar" sha1="42a25dc3219429f0e5d060061f71acb49bf010a0" vulnerabilities="0" max_cvss_score="" version="1.3" library="hamcrest-core" library_id="maven:org.hamcrest:hamcrest-core:1.3:" vendor="org.hamcrest" description="This is the core API of hamcrest matcher framework to be used by third-party framework providers. This includes the a foundation set of matcher implementations for common operations." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/hamcrest-core-1.3.jar" /></file_paths><licenses><license name="BSD 3-Clause &quot;New&quot; or &quot;Revised&quot; License" spdx_id="BSD-3-Clause" license_url="https://spdx.org/licenses/BSD-3-Clause.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="6259a4d6-8f36-45f4-9d32-686e6c85b856" file_name="asm-5.0.3.jar" sha1="dcc2193db20e19e1feca8b1240dbbc4e190824fa" vulnerabilities="0" max_cvss_score="" version="5.0.3" library="asm" library_id="maven:org.ow2.asm:asm:5.0.3:" vendor="org.ow2.asm" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/asm-5.0.3.jar" /></file_paths><licenses><license name="BSD 3-Clause &quot;New&quot; or &quot;Revised&quot; License" spdx_id="BSD-3-Clause" license_url="https://spdx.org/licenses/BSD-3-Clause.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="626acdd8-a786-4c69-a175-2f53ea0ee36f" file_name="annotations-9.0.jar" sha1="1535a07290d970f5247ca66064bff1fd1e71844f" vulnerabilities="0" max_cvss_score="" version="9.0" library="annotations" library_id="maven:org.kohsuke.jetbrains:annotations:9.0:" vendor="org.kohsuke.jetbrains" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/annotations-9.0.jar" /></file_paths><vulnerabilities /><violated_policy_rules /></component><component component_id="66640a0b-3632-4f33-aecf-7a2f54cb91c6" file_name="beanio-2.1.0.jar" sha1="5e454160ebf6feee16533015705b1d90506af598" vulnerabilities="0" max_cvss_score="" version="2.1.0" library="beanio" library_id="maven:org.beanio:beanio:2.1.0:" vendor="org.beanio" description="A Java un/marshalling library for CSV, XML, delimited and fixed length stream formats." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/beanio-2.1.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="679bbc48-6a84-4bdf-95ca-52d63d83b493" file_name="spring-plugin-core-1.2.0.RELEASE.jar" sha1="f380e7760032e7d929184f8ad8a33716b75c0657" vulnerabilities="0" max_cvss_score="" version="1.2.0.RELEASE" library="spring-plugin-core" library_id="maven:org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE:" vendor="org.springframework.plugin" description="Core plugin infrastructure" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-plugin-core-1.2.0.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="68c3ee95-fdfe-4023-8024-3dbe469096fd" file_name="retrofit-2.5.0.jar" sha1="713ce36037bf24a76a3974c05cb85c3f754b1cc3" vulnerabilities="0" max_cvss_score="" version="2.5.0" library="retrofit" library_id="maven:com.squareup.retrofit2:retrofit:2.5.0:" vendor="com.squareup.retrofit2" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/retrofit-2.5.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="6ed9b66e-7917-46a7-987c-7f6e89645087" file_name="junit-4.12.jar" sha1="2973d150c0dc1fefe998f834810d68f278ea58ec" vulnerabilities="1" max_cvss_score="1.9" version="4.12" library="junit" library_id="maven:junit:junit:4.12:" vendor="junit" description="JUnit is a unit testing framework for Java, created by Erich Gamma and Kent Beck." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/junit-4.12.jar" /></file_paths><licenses><license name="Eclipse Public License 1.0" spdx_id="EPL-1.0" license_url="https://spdx.org/licenses/EPL-1.0.html" risk_rating="3" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2020-15250" cvss_score="1.9" severity="1" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="junit is vulnerable to information disclosure. The vulnerability exists through the behaviour of `TemporaryFolder` on UNIX-like systems, where the system's temporary directory is shared between all users on that system by default." severity_desc="Very Low" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="717c1344-8e8a-41c1-8b92-2a77c7dcf6b1" file_name="HdrHistogram-2.1.9.jar" sha1="e4631ce165eb400edecfa32e03d3f1be53dee754" vulnerabilities="0" max_cvss_score="" version="2.1.9" library="HdrHistogram" library_id="maven:org.hdrhistogram:HdrHistogram:2.1.9:" vendor="org.hdrhistogram" description="HdrHistogram supports the recording and analyzing sampled data value&#xa;        counts across a configurable integer value range with configurable value&#xa;        precision within the range. Value precision is expressed as the number of&#xa;        significant digits in the value recording, and provides control over value&#xa;        quantization behavior across the value range and the subsequent value&#xa;        resolution at any given level." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/HdrHistogram-2.1.9.jar" /></file_paths><licenses><license name="Creative Commons Attribution 3.0" spdx_id="CC-BY-3.0" license_url="https://spdx.org/licenses/CC-BY-3.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="7236930d-129c-4ef5-8830-4b1115f0b932" file_name="javax.el-3.0.0.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="3.0.0" library="javax.el" library_id="maven:org.lucee:javax.el:3.0.0:" vendor="org.lucee" description="OSGi Version of javax.el" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/javax.el-3.0.0.jar:javax.el-3.0.0.jar" /></file_paths><vulnerabilities /><violated_policy_rules /></component><component component_id="740a0f68-bb3f-4aa8-b410-efbb48f8b0e9" file_name="netty-buffer-4.1.36.Final.jar" sha1="7f2db0921dd57df4db076229830ab09bba713aeb" vulnerabilities="0" max_cvss_score="" version="4.1.36.Final" library="netty-buffer" library_id="maven:io.netty:netty-buffer:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-buffer-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="74b1de95-5616-45bb-8ebe-87d0f39aec36" file_name="retrofit2-reactor-adapter-2.1.0.jar" sha1="4528a0c34521d1800874fb1362ebfb62c97fa787" vulnerabilities="0" max_cvss_score="" version="2.1.0" library="retrofit2-reactor-adapter" library_id="maven:com.jakewharton.retrofit:retrofit2-reactor-adapter:2.1.0:" vendor="com.jakewharton.retrofit" description="A CallAdapter.Factory for Project Reactor types." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/retrofit2-reactor-adapter-2.1.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="76c321b7-6f96-4065-a3ed-8426ae235e8c" file_name="lombok-1.18.8.jar" sha1="448003bc1b234aac04b58e27d7755c12c3ec4236" vulnerabilities="0" max_cvss_score="" version="1.18.8" library="lombok" library_id="maven:org.projectlombok:lombok:1.18.8:" vendor="org.projectlombok" description="Spice up your java: Automatic Resource Management, automatic generation of getters, setters, equals, hashCode and toString, and more!" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/lombok-1.18.8.jar" /></file_paths><licenses><license name="MIT License" spdx_id="MIT" license_url="https://spdx.org/licenses/MIT.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="76fca4f7-9919-4fc9-9ba2-ce00f25ad472" file_name="spring-boot-starter-webflux-2.1.5.RELEASE.jar" sha1="0571451bab6f5dca851b441cb5d7d7ffe886ad26" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-starter-webflux" library_id="maven:org.springframework.boot:spring-boot-starter-webflux:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Starter for building WebFlux applications using Spring Framework's&#xa;&#x9;&#x9;Reactive Web support" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-starter-webflux-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="790b58f4-290a-462b-9945-1eef74d7deed" file_name="org.apache.servicemix.bundles.javax-el-impl-3.0.0_1.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="3.0.0_1" library="org.apache.servicemix.bundles.javax-el-impl" library_id="maven:org.apache.servicemix.bundles:org.apache.servicemix.bundles.javax-el-impl:3.0.0_1:" vendor="org.apache.servicemix.bundles" description="This OSGi bundle wraps ${pkgArtifactId} ${pkgVersion} jar file." added_date="2021-05-21 18:44:40 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/javax.el-3.0.0.jar:org.apache.servicemix.bundles.javax-el-impl-3.0.0_1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="7a6e13ea-5759-4f22-971e-623b488c1b45" file_name="jna-platform-4.5.2.jar" sha1="741853c07152f6c0fef5194efa6b2dabac22e9c0" vulnerabilities="0" max_cvss_score="" version="4.5.2" library="jna-platform" library_id="maven:net.java.dev.jna:jna-platform:4.5.2:" vendor="net.java.dev.jna" description="Java Native Access Platform" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jna-platform-4.5.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /><license name="GNU Lesser General Public License v2.1 only" spdx_id="LGPL-2.1-only" license_url="https://spdx.org/licenses/LGPL-2.1-only.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="7b27b13b-a0e7-498b-966d-0b4ae954674b" file_name="bcprov-jdk15on-1.60.jar" sha1="bd47ad3bd14b8e82595c7adaa143501e60842a84" vulnerabilities="2" max_cvss_score="5.0" version="1.60" library="bcprov-jdk15on" library_id="maven:org.bouncycastle:bcprov-jdk15on:1.60:" vendor="org.bouncycastle" description="The Bouncy Castle Crypto package is a Java implementation of cryptographic algorithms. This jar contains JCE provider and lightweight API for the Bouncy Castle Cryptography APIs for JDK 1.5 to JDK 1.8." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/bcprov-jdk15on-1.60.jar" /></file_paths><licenses><license name="MIT License" spdx_id="MIT" license_url="https://spdx.org/licenses/MIT.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /><license name="Bouncy Castle License" spdx_id="Bouncycastle" license_url="https://www.bouncycastle.org/licence.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2020-15522" cvss_score="4.3" severity="3" cwe_id="" first_found_date="2021-05-24 06:41:29 UTC" cve_summary="bouncycastle is vulnerable to information disclosure. The vulnerability exists due to a timing issue within the EC math library that can expose information about the private key when an attacker is able to observe timing information for the generation of multiple deterministic ECDSA signatures." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="SRCCLR-SID-27749" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="Bouncy Castle is vulnerable to hash collision attacks. The library keystore files uses a HMAC hash that is only 16 bits long, allowing a malicious user to retrieve the password used for keystore integrity verification checks. This vulnerability only affects users of the `BKS-V1` keystore format, which was re-introduced since 1.49. Since it is re-introduced in Bouncy Castle 1.49, users of Bouncy Castle 1.49 and above may be affected if the legacy BKS-V1 is being used. To remediate the vulnerability, ensure that there are no usage of BKS-V1." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="7c76f79d-7a00-4ea0-8634-1adc62b87084" file_name="classgraph-4.1.7.jar" sha1="d0c2f1fecc8cf18ba9191646f9e95a3a4dac395f" vulnerabilities="0" max_cvss_score="" version="4.1.7" library="classgraph" library_id="maven:io.github.classgraph:classgraph:4.1.7:" vendor="io.github.classgraph" description="Uber-fast, ultra-lightweight Java classpath and module path scanner (formerly named FastClasspathScanner). https://github.com/classgraph/classgraph" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/classgraph-4.1.7.jar" /></file_paths><licenses><license name="MIT License" spdx_id="MIT" license_url="https://spdx.org/licenses/MIT.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="7c8741bb-75c4-4baa-b041-ad6faeabde78" file_name="jackson-core-2.9.8.jar" sha1="0f5a654e4675769c716e5b387830d19b501ca191" vulnerabilities="0" max_cvss_score="" version="2.9.8" library="jackson-core" library_id="maven:com.fasterxml.jackson.core:jackson-core:2.9.8:" vendor="com.fasterxml.jackson.core" description="Core Jackson processing abstractions (aka Streaming API), implementation for JSON" added_date="2021-05-21 18:44:40 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jackson-core-2.9.8.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="7ca3d549-2961-455d-9d93-b29422d64e93" file_name="spring-jcl-5.1.7.RELEASE.jar" sha1="6b14bfb9ae41ca1bc604fe2e78f4a6efa3d67002" vulnerabilities="0" max_cvss_score="" version="5.1.7.RELEASE" library="spring-jcl" library_id="maven:org.springframework:spring-jcl:5.1.7.RELEASE:" vendor="org.springframework" description="Spring Commons Logging Bridge" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-jcl-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="80e505a7-3bf0-49bd-82e1-7f4ea5709aeb" file_name="commons-lang3-3.8.1.jar" sha1="6505a72a097d9270f7a9e7bf42c4238283247755" vulnerabilities="0" max_cvss_score="" version="3.8.1" library="commons-lang3" library_id="maven:org.apache.commons:commons-lang3:3.8.1:" vendor="org.apache.commons" description="Apache Commons Lang, a package of Java utility classes for the&#xa;  classes that are in java.lang's hierarchy, or are considered to be so&#xa;  standard as to justify existence in java.lang." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/commons-lang3-3.8.1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="81edbe0d-e030-4c6e-8f87-8eb6b27ca9e5" file_name="hibernate-validator-6.0.16.Final.jar" sha1="ad9557c558972093c0567a2a1f224f318c00f650" vulnerabilities="2" max_cvss_score="5.0" version="6.0.16.Final" library="hibernate-validator" library_id="maven:org.hibernate.validator:hibernate-validator:6.0.16.Final:" vendor="org.hibernate.validator" description="Hibernate's Bean Validation (JSR-380) reference implementation." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/hibernate-validator-6.0.16.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2019-10219" cvss_score="4.3" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:39 UTC" cve_summary="hibernate-validator is vulnerable to cross-site scripting (XSS). The vulnerability exists as the `SafeHtml` annotation from `SafeHtmlValidator` does not properly sanitize payloads in HTML comments." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-10693" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:39 UTC" cve_summary="hibernate-validator is vulnerable to EL Expression Injection. The vulnerability exists as the value of `modType` in the validation message is improperly evaluated with `$`." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="841dcb6d-73a9-4ce2-9d17-697a5987e2fd" file_name="hazelcast-3.11.1.jar" sha1="7fac57110a12a55146ba6c4fd240194309ea9b12" vulnerabilities="0" max_cvss_score="" version="3.11.1" library="hazelcast" library_id="maven:com.hazelcast:hazelcast:3.11.1:" vendor="com.hazelcast" description="Core Hazelcast Module" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/hazelcast-3.11.1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="84d2660f-96c3-4eae-a7df-ab9d66fca9f6" file_name="slf4j-api-1.7.26.jar" sha1="77100a62c2e6f04b53977b9f541044d7d722693d" vulnerabilities="0" max_cvss_score="" version="1.7.26" library="slf4j-api" library_id="maven:org.slf4j:slf4j-api:1.7.26:" vendor="org.slf4j" description="The slf4j API" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/slf4j-api-1.7.26.jar" /></file_paths><licenses><license name="MIT License" spdx_id="MIT" license_url="https://spdx.org/licenses/MIT.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="864c75a3-2333-4ec8-a97a-79c85af530c7" file_name="spring-security-rsa-1.0.7.RELEASE.jar" sha1="8fb787a76b2a31b7efbb71ae9be68b269a358302" vulnerabilities="0" max_cvss_score="" version="1.0.7.RELEASE" library="spring-security-rsa" library_id="maven:org.springframework.security:spring-security-rsa:1.0.7.RELEASE:" vendor="org.springframework.security" description="Spring Security RSA is a small utility library for RSA ciphers.&#xa;&#x9;It belongs to the family of Spring Security crypto libraries that handle encoding and decoding text as&#xa;&#x9;a general, useful thing to be able to do." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-security-rsa-1.0.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="86ce3435-0d4b-4656-bc93-68ae35a5b264" file_name="jackson-databind-2.9.8.jar" sha1="11283f21cc480aa86c4df7a0a3243ec508372ed2" vulnerabilities="51" max_cvss_score="8.3" version="2.9.8" library="jackson-databind" library_id="maven:com.fasterxml.jackson.core:jackson-databind:2.9.8:" vendor="com.fasterxml.jackson.core" description="General data-binding functionality for Jackson: works on core streaming API" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jackson-databind-2.9.8.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2019-12086" cvss_score="5.0" severity="3" cwe_id="CWE-200" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint, the service has the mysql-connector-java jar (8.0.14 or earlier) in the classpath, and an attacker can host a crafted MySQL server reachable by the victim, an attacker can send a crafted JSON message that allows them to read arbitrary local files on the server. This occurs because of missing com.mysql.cj.jdbc.admin.MiniAdmin validation." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-12384" cvss_score="7.5" severity="4" cwe_id="CWE-502" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to arbitrary code execution via unsafe deserrialization. Lack of object validation before deserialization allows an attacker to execute arbitrary code using polymorphic deserialization of a malicious gadget type." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-12814" cvss_score="4.3" severity="3" cwe_id="CWE-200" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x through 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has JDOM 1.x or 2.x jar in the classpath, an attacker can send a specifically crafted JSON message that allows them to read arbitrary local files on the server." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-14379" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The attack is possible due to lack of proper handling of gadget type conversion when `ehcache` is used." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-14439" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data. A Polymorphic Typing issue existed in the library as `DefaultTransactionManagerLookup` and `JNDIConnectionSource` was missing from the validator function.. This only occurs when Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and it can potentially lead to remote code execution." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-14540" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="FasterXML jackson-databind is vulnerable to deserialization of untrusted data . There is a polymorphic typing issue because there are more than one association gadget types related to com.zaxxer.hikari.HikariConfig by default." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-14892" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution. The application does not block the `commons-configuration` and `commons-configuration2` classes during deserialization, which would allow a remote attacker to leverage the vulnerability to execute arbitrary code." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-14893" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution. The application does not block the `xalan` classes during deserialization, which would allow a remote attacker to leverage the vulnerability to execute arbitrary code." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-16335" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="FasterXML jackson-databind is vulnerable to deserialization of untrusted data. It causes polymorphic typing because there are more than one association gadget types related to com.zaxxer.hikari.HikariDataSource by default. This vulnerability is different from CVE-2019-14540. A remote attacker can gain unauthorized access to sensitive information on the system." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-16942" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists as it does not stop classes from the `commons-dbcp` package from being used as deserialization gadgets." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-16943" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists as it does not stop classes from the `p6spy` package from being used as deserialization gadgets." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-17267" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="FasterXML jackson-databind is vulnerable to deserialization of untrusted data. There is a polymorphic typing issue because there are more than one association gadget types related to `net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup`." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-17531" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="FasterXML jackson-databind is vulnerable to remote code execution (RCE). A polymorphic typing issue allows a remote attacker to execute arbitrary code through the JNDI service due to unsafe deserialization of objects related to the `apache-log4j-extra` classpath." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2019-20330" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists as an unsafe deserializatino flaw due to the lack of sanitization of `net.sf.ehcache.transaction.manager.selector.GenericJndiSelector`, or `net.sf.ehcache.transaction.manager.selector.GlassfishSelector` classes when polymorphic typing with Default Typing is enabled." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-10672" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data that can lead to remote code execution. The gadget `org.apache.aries.transaction.jms` is not validated and filtered by default from the interaction between serialization gadgets and polymorphic typing, allowing for injection of said object type which can lead to execution of arbitrary code." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-10673" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE) through deserialization of untrusted data. It is possible because the untrusted class, `com.caucho.config.types.ResourceRef `, was not filtered by default from the interaction between serialization gadgets and polymorphinc typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-10968" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="FasterXML jackson-databind is vulnerable to deserialization of untrusted data. There is a polymorphic typing issue because there are more than one association gadget types related to `org.aoju.bus.proxy.provider.remoting.RmiProvider` (aka `bus-proxy`) implementation by default." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-10969" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data. It was possible for an untrusted class, `javax.swing.JEditorPane` to be used as a serialization gadget through polymorphic typing, potentially allowing execution of arbitrary code." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-11111" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution. The vulnerability exists as the untrusted classes `org.apache.activemq.*` were not filtered by default from the interaction between serialization gadgets and polymorphic typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-11112" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution. The vulnerability exists as deserialization of untrusted data containing the class `org.apache.commons.proxy.provider.remoting.RmiProvider` was not filtered by default from the interaction between serialization gadgets and polymorphinc typing, allowing the execution of arbitrary code." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-11113" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data that can lead to remote code execution. It is possible because the untrusted classe `org.apache.openjpa.ee.WASRegistryManagedRuntime` were not filtered by default from the interaction between serialization gadgets and polymorphinc typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-11619" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data. It was possible for an untrusted class, `org.springframework.aop.config.MethodLocatingFactoryBean`, and `org.springframework.beans.factory.config.BeanReferenceFactoryBean`, to be used as a serialization gadget through polymorphic typing, potentially allowing execution of arbitrary code." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-11620" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="FasterXML jackson-databind is vulnerable to deserialization of untrusted data. It causes polymorphic typing because there are more than one association gadget types related to `commons-jelly` (`org.apache.commons.jelly.impl.Embedded `) by default. A remote attacker can gain unauthorized access to sensitive information on the system." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-14060" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution. It was possible to use the apache-drill gadget type as a serialization gadget through polymorphic typing and execute arbitrary code on the system." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-14061" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data that can lead to remote code execution. It is possible because it does not filter the untrusted serialization classes `weblogic/oracle-aqjms` from interaction between serialization gadgets and typing by default." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-14062" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data that can lead to remote code execution. It is possible because the untrusted class `com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool` was not filtered by default from the interaction between serialization gadgets and polymorphinc typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-14195" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution. It was possible to use the `org.jsecurity` gadget type as a serialization gadget through polymorphic typing and execute arbitrary code on the system." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-24616" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to arbitrary code execution. The vulnerability exists as an untrusted class, `br.com.anteros.dbcp.AnterosDBCPDataSource`, was not filtered by default from the interaction between serialization gadgets and polymorphic typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-24750" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to arbitrary code execution. The vulnerability exists as the untrusted Java object `com.pastdev.httpcomponents.configuration.JndiConfiguration` is not filtered by default, allowing an attacker to execute arbitrary code during deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-25649" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to XML external entity (XXE) attack. The external DTDs and doctype declarations not disabled by default and allows an attacker to perform XXE attacks against the application using the library." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-35490" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data that can lead to remote code execution. It is possible because untrusted classes `org.apache.commons.dbcp2.datasources.SharedPoolDataSource` was not filtered by default from the interaction between serialization gadgets and polymorphic typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-35491" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data that can lead to remote code execution. It is possible because untrusted classes `org.apache.commons.dbcp2.datasources.SharedPoolDataSource` was not filtered by default from the interaction between serialization gadgets and polymorphic typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-35728" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36179" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36180" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36181" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPD` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36182" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36183" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36184" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36185" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36186" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36187" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `&quot;org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36188" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-36189" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the lack of sanitization of the `com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource` class through deserialization." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-8840" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution. The vulnerability exists because it does not restrict the data sources for the `org.apache.xbean.propertyeditor.JndiConverter` object type, leading to deserialisation of arbitrary data from external untrusted sources which would allow an attacker to execute arbitrary code." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-9546" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data. It is possible because untrusted class `org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig (aka shaded hikari-config)` was not filtered by default from the interaction between serialization gadgets and polymorphinc typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-9548" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to remote code execution (RCE). The vulnerability exists through the deserialization of a JSON payload that uses the `br.com.anteros.dbcp.AnterosDBCPConfig` gadget." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2021-20190" cvss_score="8.3" severity="5" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to arbitrary code execution. The vulnerability exists through the lack of sanitization of the `javax.swing.JTextPane` class through deserialization." severity_desc="Very High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="SRCCLR-SID-21524" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="FasterXML jackson-databind is vulnerable to deserialization of untrusted data. There is a polymorphic typing issue because there are more than one association gadget types related to CXF JAX-RS implementation by default." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="SRCCLR-SID-22677" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data that can lead to remote code execution. It is possible because untrusted classes `org.apache.shiro.realm.jndi.JndiRealmFactory` and `org.apache.shiro.jndi.JndiObjectFactory` were not filtered by default from the interaction between serialization gadgets and polymorphinc typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="SRCCLR-SID-22717" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="jackson-databind is vulnerable to deserialization of untrusted data that can lead to remote code execution. It is possible because untrusted classes `org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup`, `org.apache.ignite.cache.jta.jndi.CacheJndiTmFactory`, and `org.quartz.utils.JNDIConnectionProvider` were not filtered by default from the interaction between serialization gadgets and polymorphinc typing." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="8708020a-d317-4a85-a78e-dbd5011cc708" file_name="jcabi-manifests-1.1.jar" sha1="e4f4488c0e3905c6fab287aca2569928fe1712df" vulnerabilities="0" max_cvss_score="" version="1.1" library="jcabi-manifests" library_id="maven:com.jcabi:jcabi-manifests:1.1:" vendor="com.jcabi" description="Manager of MANIFEST.MF files" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jcabi-manifests-1.1.jar" /></file_paths><licenses><license name="BSD 3-Clause &quot;New&quot; or &quot;Revised&quot; License" spdx_id="BSD-3-Clause" license_url="https://spdx.org/licenses/BSD-3-Clause.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="877b797b-2058-4193-9a13-89c64bcf9720" file_name="log4j-api-2.11.2.jar" sha1="f5e9a2ffca496057d6891a3de65128efc636e26e" vulnerabilities="0" max_cvss_score="" version="2.11.2" library="log4j-api" library_id="maven:org.apache.logging.log4j:log4j-api:2.11.2:" vendor="org.apache.logging.log4j" description="The Apache Log4j API" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/log4j-api-2.11.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="87e9254a-e287-4c56-b6d9-b56a7e79d2ea" file_name="kotlin-stdlib-common-1.2.71.jar" sha1="ba18ca1aa0e40eb6f1865b324af2f4cbb691c1ec" vulnerabilities="0" max_cvss_score="" version="1.2.71" library="kotlin-stdlib-common" library_id="maven:org.jetbrains.kotlin:kotlin-stdlib-common:1.2.71:" vendor="org.jetbrains.kotlin" description="Kotlin Common Standard Library" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/kotlin-stdlib-common-1.2.71.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="8c0b9800-b462-448d-bcd6-a0a30b20c37a" file_name="netty-codec-http2-4.1.36.Final.jar" sha1="ed198d8a5283910b0c062a50dd28ef4688dcb2a5" vulnerabilities="2" max_cvss_score="5.0" version="4.1.36.Final" library="netty-codec-http2" library_id="maven:io.netty:netty-codec-http2:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-codec-http2-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2021-21295" cvss_score="2.6" severity="2" cwe_id="" first_found_date="2021-05-21 18:44:39 UTC" cve_summary="netty-codec-http2 is vulnerable to HTTP request smuggling. The `Content-Length` header is not validated and allows an attacker to smuggle requests as requests are downgraded from HTTP/2 to HTTP/1.1." severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2021-21409" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:39 UTC" cve_summary="netty-codec-http2 is vulnerable to HTTP request smuggling. The vulnerability exists through an incomplete fix in `CVE-2021-21295` where the `content-length` header is not properly validated if the request uses a single `Http2HeaderFrame`, and with `endStream` set to true." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="8d017d33-1152-4e0f-b4bd-10b24d2a5a8f" file_name="javax.el-3.0.0.jar" sha1="dd532526e7c8de48e40419e6af1183658a973379" vulnerabilities="0" max_cvss_score="" version="3.0.0" library="javax.el" library_id="maven:org.glassfish:javax.el:3.0.0:" vendor="org.glassfish" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/javax.el-3.0.0.jar" /></file_paths><licenses><license name="CeCILL Free Software License Agreement v1.0" spdx_id="CECILL-1.0" license_url="https://spdx.org/licenses/CECILL-1.0.html" risk_rating="3" mitigation="false" license_affects_policy_compliance="false" /><license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https://spdx.org/licenses/CDDL-1.0.html" risk_rating="3" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="91d1b372-b8ca-4fd3-9fd0-ffdb08ddc00b" file_name="netty-handler-4.1.36.Final.jar" sha1="1c38a5920a10c01b1cce4cdc964447ec76abf1b5" vulnerabilities="1" max_cvss_score="5.8" version="4.1.36.Final" library="netty-handler" library_id="maven:io.netty:netty-handler:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-handler-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="SRCCLR-SID-22277" cvss_score="5.8" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="netty-handler is vulnerable to man-in-the-middle attacks. The library uses an SSLEngine that does not verify certificate hostnames when establishing connections with clients by default. This allows an attacker to potentially intercept and modify network traffic in a successful man-in-the-middle attack." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="92e3ced7-fdad-458f-9c5e-4fc46488da3a" file_name="byte-buddy-1.9.12.jar" sha1="39050dbbd36862ea87eb9a64158854b04619ccd6" vulnerabilities="0" max_cvss_score="" version="1.9.12" library="byte-buddy" library_id="maven:net.bytebuddy:byte-buddy:1.9.12:" vendor="net.bytebuddy" description="Byte Buddy is a Java library for creating Java classes at run time.&#xa;        This artifact is a build of Byte Buddy with all ASM dependencies repackaged into its own name space." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/byte-buddy-1.9.12.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="94b089a5-d50c-42fe-ba21-fd3267a1114f" file_name="reactor-adapter-3.2.3.RELEASE.jar" sha1="d6bdfc72e30c0a84c9eb70373f5372d04a152682" vulnerabilities="0" max_cvss_score="" version="3.2.3.RELEASE" library="reactor-adapter" library_id="maven:io.projectreactor.addons:reactor-adapter:3.2.3.RELEASE:" vendor="io.projectreactor.addons" description="Scheduler implementations on top of various async boundary providers" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/reactor-adapter-3.2.3.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="96e0995e-b543-4041-a14e-4790b66b6043" file_name="spring-cloud-config-client-2.1.1.RELEASE.jar" sha1="247efbc6528c76e9f665de2b76281ae19d96c0b3" vulnerabilities="1" max_cvss_score="4.3" version="2.1.1.RELEASE" library="spring-cloud-config-client" library_id="maven:org.springframework.cloud:spring-cloud-config-client:2.1.1.RELEASE:" vendor="org.springframework.cloud" description="This project is a Spring configuration client." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-cloud-config-client-2.1.1.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2020-5405" cvss_score="4.3" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="spring-cloud-config-client is vulnerable to directory traversal. The attack is possible because it fails to validate the names and labels in environment and resource controller, allowing an attacker to provide malicious configuration files by exploiting the vulnerability." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="97146830-b167-424a-8131-2d71f9845604" file_name="spring-boot-starter-reactor-netty-2.1.5.RELEASE.jar" sha1="897791dbebe6175fcae61b54ba70de26953a2926" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-starter-reactor-netty" library_id="maven:org.springframework.boot:spring-boot-starter-reactor-netty:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Starter for using Reactor Netty as the embedded reactive HTTP server." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-starter-reactor-netty-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="9af546d5-5e92-4745-b123-41c0f3d42ea7" file_name="validation-api-2.0.1.Final.jar" sha1="cb855558e6271b1b32e716d24cb85c7f583ce09e" vulnerabilities="0" max_cvss_score="" version="2.0.1.Final" library="validation-api" library_id="maven:javax.validation:validation-api:2.0.1.Final:" vendor="javax.validation" description="Bean Validation API" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/validation-api-2.0.1.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="9bc6a92c-fb56-4c16-b6e1-f0c385f1c924" file_name="jul-to-slf4j-1.7.26.jar" sha1="8031352b2bb0a49e67818bf04c027aa92e645d5c" vulnerabilities="0" max_cvss_score="" version="1.7.26" library="jul-to-slf4j" library_id="maven:org.slf4j:jul-to-slf4j:1.7.26:" vendor="org.slf4j" description="JUL to SLF4J bridge" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jul-to-slf4j-1.7.26.jar" /></file_paths><licenses><license name="MIT License" spdx_id="MIT" license_url="https://spdx.org/licenses/MIT.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="9d02349f-13cb-4006-a1c8-90f2babc173d" file_name="org.apache.servicemix.bundles.spring-aop-5.1.7.RELEASE_1.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="5.1.7.RELEASE_1" library="org.apache.servicemix.bundles.spring-aop" library_id="maven:org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aop:5.1.7.RELEASE_1:" vendor="org.apache.servicemix.bundles" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-aop-5.1.7.RELEASE.jar:org.apache.servicemix.bundles.spring-aop-5.1.7.RELEASE_1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="9eb4a66c-08c4-4c67-abc3-fcc41cf1a312" file_name="spring-security-crypto-5.1.5.RELEASE.jar" sha1="f5f8b415bd87d0e3bdeaa48751ec79bbdcd2e414" vulnerabilities="1" max_cvss_score="4.0" version="5.1.5.RELEASE" library="spring-security-crypto" library_id="maven:org.springframework.security:spring-security-crypto:5.1.5.RELEASE:" vendor="org.springframework.security" description="spring-security-crypto" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-security-crypto-5.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2020-5408" cvss_score="4.0" severity="2" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="spring-security-core is vulnerable to Information Disclosure. The vulnerability exists as it uses a fixed null initialization vector with CBC Mode for the queryable text encryptor rather than handling the `null` value passed to the function `BCryptPasswordEncoder.encode()`, thereby allowing a user with access to encrypted data to trigger a dictionary attack to disclose the plaintext." severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="9eee68d2-c395-44ce-a1ee-64e702510f37" file_name="okio-2.2.1.jar" sha1="dcdc2776f9139581885febcc3d74ef518f9d73e1" vulnerabilities="0" max_cvss_score="" version="2.2.1" library="okio" library_id="maven:com.squareup.okio:okio:2.2.1:" vendor="com.squareup.okio" description="A modern I/O API for Java" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/okio-2.2.1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="a2a26a5b-046d-48de-85ee-ac4190dbbd20" file_name="spring-boot-starter-2.1.5.RELEASE.jar" sha1="74952d169c2da56f7794b3a88508e52005bb8f36" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-starter" library_id="maven:org.springframework.boot:spring-boot-starter:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Core starter, including auto-configuration support, logging and YAML" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-starter-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="a66ad93c-a9d3-4650-b8e1-48a2fa11c6db" file_name="throwing-function-1.3.jar" sha1="32947866b8754295efde73ee7d39ea29a247a2b5" vulnerabilities="0" max_cvss_score="" version="1.3" library="throwing-function" library_id="maven:pl.touk:throwing-function:1.3:" vendor="pl.touk" description="Java 8 functional types on steroids supporting checked exceptions" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/throwing-function-1.3.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="a71f3dde-d31e-49f6-b1e9-a25dc26ca55d" file_name="jcabi-log-0.14.jar" sha1="819a57348f2448f01d74f8a317dab61d6a90cac2" vulnerabilities="0" max_cvss_score="" version="0.14" library="jcabi-log" library_id="maven:com.jcabi:jcabi-log:0.14:" vendor="com.jcabi" description="Wrapper of SLF4J and a few supplementary logging classes" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jcabi-log-0.14.jar" /></file_paths><licenses><license name="BSD 3-Clause &quot;New&quot; or &quot;Revised&quot; License" spdx_id="BSD-3-Clause" license_url="https://spdx.org/licenses/BSD-3-Clause.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="ab15c51c-1465-442c-bd25-ab073b0c68b1" file_name="spring-expression-5.1.7.RELEASE.jar" sha1="7b47446553c83a5a7323d647f5c1793106b2948c" vulnerabilities="0" max_cvss_score="" version="5.1.7.RELEASE" library="spring-expression" library_id="maven:org.springframework:spring-expression:5.1.7.RELEASE:" vendor="org.springframework" description="Spring Expression Language (SpEL)" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-expression-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="ab565ae8-6f28-4269-8b11-3c6b29feba97" file_name="gson-2.8.5.jar" sha1="f645ed69d595b24d4cf8b3fbb64cc505bede8829" vulnerabilities="0" max_cvss_score="" version="2.8.5" library="gson" library_id="maven:com.google.code.gson:gson:2.8.5:" vendor="com.google.code.gson" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/gson-2.8.5.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="ac35c450-e52b-4f06-abe5-5aff4be3a3d9" file_name="converter-jackson-2.5.0.jar" sha1="2fb02f5ce597f3ba04c3530908a8a9c7458b40a1" vulnerabilities="0" max_cvss_score="" version="2.5.0" library="converter-jackson" library_id="maven:com.squareup.retrofit2:converter-jackson:2.5.0:" vendor="com.squareup.retrofit2" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/converter-jackson-2.5.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="ae7ff3e9-3351-4c80-b568-0414727b9f9b" file_name="netty-handler-proxy-4.1.36.Final.jar" sha1="f313f45db4417cd8a87c49b8cb01faf19f6abdec" vulnerabilities="0" max_cvss_score="" version="4.1.36.Final" library="netty-handler-proxy" library_id="maven:io.netty:netty-handler-proxy:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-handler-proxy-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="ae976694-f741-4492-8213-4c9119ecb137" file_name="snakeyaml-1.23.jar" sha1="ec62d74fe50689c28c0ff5b35d3aebcaa8b5be68" vulnerabilities="1" max_cvss_score="5.0" version="1.23" library="snakeyaml" library_id="maven:org.yaml:snakeyaml:1.23:" vendor="org.yaml" description="YAML 1.1 parser and emitter for Java" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/snakeyaml-1.23.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2017-18640" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="snakeyaml is vulnerable to denial of service. The library allows an attacker to crash the application through an entity expansion attack, also known as billion laughs attack, by providing a malicious YAML file to be parsed." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="afd96932-fe5e-4cae-a752-6f7fff9c5772" file_name="netty-transport-4.1.36.Final.jar" sha1="8546e6be47be587acab86bbd106ca023678f07d9" vulnerabilities="0" max_cvss_score="" version="4.1.36.Final" library="netty-transport" library_id="maven:io.netty:netty-transport:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-transport-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="b0a27a0e-7536-4aa9-9d25-26be194597b2" file_name="netty-common-4.1.36.Final.jar" sha1="f6f38fde652a70ea579897edc80e52353e487ae6" vulnerabilities="0" max_cvss_score="" version="4.1.36.Final" library="netty-common" library_id="maven:io.netty:netty-common:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-common-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="b19ff09e-1034-4f4b-b747-b5a9121c9f82" file_name="commons-cli-1.2.jar" sha1="2bf96b7aa8b611c177d329452af1dc933e14501c" vulnerabilities="0" max_cvss_score="" version="1.2" library="commons-cli" library_id="maven:commons-cli:commons-cli:1.2:" vendor="commons-cli" description="Commons CLI provides a simple API for presenting, processing and validating a command line interface." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/commons-cli-1.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="b5001e2e-1601-4d29-816f-e14bc9d33d12" file_name="spring-boot-starter-logging-2.1.5.RELEASE.jar" sha1="b4fe11fb0e606b67b9fb2bd9ae4fe65b484445dd" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-starter-logging" library_id="maven:org.springframework.boot:spring-boot-starter-logging:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Starter for logging using Logback. Default logging starter" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-starter-logging-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="b5146d14-fb21-4eb8-af43-0b1d6272031e" file_name="netty-codec-4.1.36.Final.jar" sha1="8462116d327bb3d1ec24258071f2e7345a73dbfc" vulnerabilities="2" max_cvss_score="5.0" version="4.1.36.Final" library="netty-codec" library_id="maven:io.netty:netty-codec:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-codec-4.1.36.Final.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2020-10707" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:39 UTC" cve_summary="netty is vulnerable to denial of service (DoS). During compression or decompression process of a streams of bytes using DEFLATE&#xa;algorithm, the codec does not properly handle the buffer allocation sizes, leading to a memory pool exhaustion." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-11612" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:39 UTC" cve_summary="netty-codec is vulnerable to denial of service (DoS). The vulnerability exists as it was possible to send a large data for compression, causing large buffer allocation sizes in the client JVM" severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="b7714af6-8348-4264-a2e5-37e227e977c6" file_name="spring-cloud-starter-2.1.1.RELEASE.jar" sha1="17d8b25a66dc159244f8bcdd5be60ae9e82658bf" vulnerabilities="0" max_cvss_score="" version="2.1.1.RELEASE" library="spring-cloud-starter" library_id="maven:org.springframework.cloud:spring-cloud-starter:2.1.1.RELEASE:" vendor="org.springframework.cloud" description="Spring Cloud Starter" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-cloud-starter-2.1.1.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="b83e4fd8-80f1-446b-a183-f54f8145580a" file_name="spring-boot-actuator-2.1.5.RELEASE.jar" sha1="eccd3c70cfbe9534db19fbdd6cbf86fab884c3c0" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-actuator" library_id="maven:org.springframework.boot:spring-boot-actuator:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Spring Boot Actuator" added_date="2021-05-21 18:44:40 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-actuator-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="bde28555-72a9-406b-b77e-bafc74ae38df" file_name="rxjava-2.2.8.jar" sha1="4b71d5338a5cdc825c67c5c81e1e605df0f1fc9d" vulnerabilities="0" max_cvss_score="" version="2.2.8" library="rxjava" library_id="maven:io.reactivex.rxjava2:rxjava:2.2.8:" vendor="io.reactivex.rxjava2" description="Reactive Extensions for Java" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/rxjava-2.2.8.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="c2371d29-d283-4846-9d10-74217f79ea12" file_name="spring-boot-actuator-autoconfigure-2.1.5.RELEASE.jar" sha1="4e6774d2f4a70e62092dbaace39190f8b1df8083" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-actuator-autoconfigure" library_id="maven:org.springframework.boot:spring-boot-actuator-autoconfigure:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Spring Boot Actuator AutoConfigure" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-actuator-autoconfigure-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="c51a9485-8565-436f-a414-34cab4215f4a" file_name="commons-codec-1.11.jar" sha1="3acb4705652e16236558f0f4f2192cc33c3bd189" vulnerabilities="1" max_cvss_score="5.0" version="1.11" library="commons-codec" library_id="maven:commons-codec:commons-codec:1.11:" vendor="commons-codec" description="The Apache Commons Codec package contains simple encoder and decoders for&#xa;     various formats such as Base64 and Hexadecimal.  In addition to these&#xa;     widely used encoders and decoders, the codec package also maintains a&#xa;     collection of phonetic encoding utilities." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/commons-codec-1.11.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="SRCCLR-SID-22742" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="commons-codec does not properly perform input validation on encoded values. The `decode()` function in the Base32, Base64 and BCodec classes fails to reject malformed Base32 and Base64 encoded strings and decodes into arbitrary values. A remote attacker can leverage this vulnerability to tunnel additional information via Base32 or Base64 encoded strings that appears to be legitimate." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component><component component_id="caae0de6-c87d-47aa-8783-8839dc2e6233" file_name="spring-aop-5.1.7.RELEASE.jar" sha1="8138b5e3dd01d514741de35d7f5050599c617509" vulnerabilities="0" max_cvss_score="" version="5.1.7.RELEASE" library="spring-aop" library_id="maven:org.springframework:spring-aop:5.1.7.RELEASE:" vendor="org.springframework" description="Spring AOP" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-aop-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="cdb043bc-9632-4b35-976d-bdd3fc59507d" file_name="jackson-datatype-jdk8-2.9.8.jar" sha1="bcd02aa9195390e23747ed40bf76be869ad3a2fb" vulnerabilities="0" max_cvss_score="" version="2.9.8" library="jackson-datatype-jdk8" library_id="maven:com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.8:" vendor="com.fasterxml.jackson.datatype" description="Add-on module for Jackson (http://jackson.codehaus.org) to support&#xa;JDK 8 data types." added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/jackson-datatype-jdk8-2.9.8.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="cecd6715-17da-497a-85ba-367269d2ef9e" file_name="resilience4j-core-0.13.2.jar" sha1="3834656c8940ea2936d4d4759da82f4aefede543" vulnerabilities="0" max_cvss_score="" version="0.13.2" library="resilience4j-core" library_id="maven:io.github.resilience4j:resilience4j-core:0.13.2:" vendor="io.github.resilience4j" description="Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/resilience4j-core-0.13.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="cf428e38-7dbc-4efc-b478-cf6e35867e9d" file_name="hazelcast-spring-3.11.1.jar" sha1="caca14431d6b08c06d819c852f3f51035a409e71" vulnerabilities="0" max_cvss_score="" version="3.11.1" library="hazelcast-spring" library_id="maven:com.hazelcast:hazelcast-spring:3.11.1:" vendor="com.hazelcast" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/hazelcast-spring-3.11.1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="d5815bda-5191-414b-adfb-62441b1fca88" file_name="snappy-java-1.1.1.6.jar" sha1="e3f12835a135c0d253bee4dbbe74d37ce35d7269" vulnerabilities="0" max_cvss_score="" version="1.1.1.6" library="snappy-java" library_id="maven:org.xerial.snappy:snappy-java:1.1.1.6:" vendor="org.xerial.snappy" description="snappy-java: A fast compression/decompression library" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/snappy-java-1.1.1.6.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="d710f4de-394b-4435-857f-a249594e8d82" file_name="spring-boot-starter-json-2.1.5.RELEASE.jar" sha1="0cf880b4a4713b2a1aea21f929df718a0260aa29" vulnerabilities="0" max_cvss_score="" version="2.1.5.RELEASE" library="spring-boot-starter-json" library_id="maven:org.springframework.boot:spring-boot-starter-json:2.1.5.RELEASE:" vendor="org.springframework.boot" description="Starter for reading and writing json" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-boot-starter-json-2.1.5.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="d84db09f-6276-4d89-89a5-775d41214c0c" file_name="logstash-logback-encoder-5.3.jar" sha1="10ac75e77127415e0da0467ac322090d2c17557f" vulnerabilities="0" max_cvss_score="" version="5.3" library="logstash-logback-encoder" library_id="maven:net.logstash.logback:logstash-logback-encoder:5.3:" vendor="net.logstash.logback" description="Logback encoder which will output events as Logstash-compatible JSON" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/logstash-logback-encoder-5.3.jar" /></file_paths><licenses><license name="MIT License" spdx_id="MIT" license_url="https://spdx.org/licenses/MIT.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="d899953a-b357-4c06-a7ce-c383c499b6d8" file_name="bcpkix-jdk15on-1.60.jar" sha1="d0c46320fbc07be3a24eb13a56cee4e3d38e0c75" vulnerabilities="0" max_cvss_score="" version="1.60" library="bcpkix-jdk15on" library_id="maven:org.bouncycastle:bcpkix-jdk15on:1.60:" vendor="org.bouncycastle" description="The Bouncy Castle Java APIs for CMS, PKCS, EAC, TSP, CMP, CRMF, OCSP, and certificate generation. This jar contains APIs for JDK 1.5 to JDK 1.8. The APIs can be used in conjunction with a JCE/JCA provider such as the one provided with the Bouncy Castle Cryptography APIs." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/bcpkix-jdk15on-1.60.jar" /></file_paths><licenses><license name="Bouncy Castle License" spdx_id="Bouncycastle" license_url="https://www.bouncycastle.org/licence.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="da4c8572-5e5d-43a7-95e6-fc773b96886e" file_name="spring-cloud-commons-2.1.1.RELEASE.jar" sha1="868586a49aad1882b5b8500c53ea8cae807a096a" vulnerabilities="0" max_cvss_score="" version="2.1.1.RELEASE" library="spring-cloud-commons" library_id="maven:org.springframework.cloud:spring-cloud-commons:2.1.1.RELEASE:" vendor="org.springframework.cloud" description="Spring Cloud Commons" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-cloud-commons-2.1.1.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="da99ef07-4508-425f-842e-e56d821eeae1" file_name="swagger-annotations-1.5.20.jar" sha1="16051f93ce11ca489a5313775d825f82fcc2cd6c" vulnerabilities="0" max_cvss_score="" version="1.5.20" library="swagger-annotations" library_id="maven:io.swagger:swagger-annotations:1.5.20:" vendor="io.swagger" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/swagger-annotations-1.5.20.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="e2b6aac0-bd61-4283-9739-3918272f9118" file_name="okhttp-sse-3.12.1.jar" sha1="2e8fc4dc3fad74372c3df3ae02c0ee954d93d7d4" vulnerabilities="0" max_cvss_score="" version="3.12.1" library="okhttp-sse" library_id="maven:com.squareup.okhttp3:okhttp-sse:3.12.1:" vendor="com.squareup.okhttp3" description="" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/okhttp-sse-3.12.1.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="e80c48a7-8f53-4659-8ef1-d4e44b53cee9" file_name="classmate-1.4.0.jar" sha1="291658ac2ce2476256c7115943652c0accb5c857" vulnerabilities="0" max_cvss_score="" version="1.4.0" library="classmate" library_id="maven:com.fasterxml:classmate:1.4.0:" vendor="com.fasterxml" description="Library for introspecting types with full generic information&#xa;        including resolving of field and method types." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/classmate-1.4.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="e9f5dedb-ef42-4959-8f35-2dd5e4402a6b" file_name="spring-plugin-metadata-1.2.0.RELEASE.jar" sha1="97223fc496b6cab31602eedbd4202aa4fff0d44f" vulnerabilities="0" max_cvss_score="" version="1.2.0.RELEASE" library="spring-plugin-metadata" library_id="maven:org.springframework.plugin:spring-plugin-metadata:1.2.0.RELEASE:" vendor="org.springframework.plugin" description="Extension package for metadata based plugins" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-plugin-metadata-1.2.0.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="ec87398e-2dc1-4ba6-838c-7ed1ec89320d" file_name="vavr-0.9.0.jar" sha1="3dd71b51838f78ae1b606fe0550b3cdd68bdcaf2" vulnerabilities="0" max_cvss_score="" version="0.9.0" library="vavr" library_id="maven:io.vavr:vavr:0.9.0:" vendor="io.vavr" description="Vavr (formerly called Javaslang) is an object-functional language extension to Java 8+." added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/vavr-0.9.0.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="ecbca005-c66f-436a-95cb-7b14a8d613d4" file_name="netty-transport-native-epoll-4.1.36.Final-linux-x86_64.jar" sha1="8ec8e248ef34b86cc7fae023fb40b9ffa8f5614f" vulnerabilities="0" max_cvss_score="" version="4.1.36.Final" library="netty-transport-native-epoll" library_id="maven:io.netty:netty-transport-native-epoll:4.1.36.Final:" vendor="io.netty" description="" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/netty-transport-native-epoll-4.1.36.Final-linux-x86_64.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="f2f8ef8d-ce91-4760-9043-6668cc50b441" file_name="spring-context-5.1.7.RELEASE.jar" sha1="b4154d41a70c56eeca42974825fe64a8576642dd" vulnerabilities="0" max_cvss_score="" version="5.1.7.RELEASE" library="spring-context" library_id="maven:org.springframework:spring-context:5.1.7.RELEASE:" vendor="org.springframework" description="Spring Context" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-context-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="f31a13f3-0886-4d41-819e-a1dd6b5ce58e" file_name="reactor-logback-3.2.3.RELEASE.jar" sha1="387a3cbd785b25d9b7d07d1f0b9ca4320e934b0a" vulnerabilities="0" max_cvss_score="" version="3.2.3.RELEASE" library="reactor-logback" library_id="maven:io.projectreactor.addons:reactor-logback:3.2.3.RELEASE:" vendor="io.projectreactor.addons" description="Async Logback appender implementation" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/reactor-logback-3.2.3.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="f6534ba0-06f7-457d-a8bb-58059da8d0c4" file_name="lang-6.6.2.jar" sha1="5f28c524cabb357b3859558b5fa882141164929c" vulnerabilities="0" max_cvss_score="" version="6.6.2" library="lang" library_id="maven:net.openhft:lang:6.6.2:" vendor="net.openhft" description="Java Lang library for High Frequency Trading (Java 6+)" added_date="2021-05-21 18:44:39 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/lang-6.6.2.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /><license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https://spdx.org/licenses/GPL-3.0-only.html" risk_rating="4" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities /><violated_policy_rules /></component><component component_id="fe480083-e756-4f98-9763-fa229acdcc17" file_name="spring-web-5.1.7.RELEASE.jar" sha1="595dd528ec66eccc6cf4375ea3b56f3605fa1d1f" vulnerabilities="3" max_cvss_score="7.6" version="5.1.7.RELEASE" library="spring-web" library_id="maven:org.springframework:spring-web:5.1.7.RELEASE:" vendor="org.springframework" description="Spring Web" added_date="2021-05-21 18:44:38 UTC" component_affects_policy_compliance="false"><file_paths><file_path value="jch-mbbk-data-retrieve-2.1.0-SNAPSHOT.jar#zip:BOOT-INF/lib/spring-web-5.1.7.RELEASE.jar" /></file_paths><licenses><license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https://spdx.org/licenses/Apache-2.0.html" risk_rating="2" mitigation="false" license_affects_policy_compliance="false" /></licenses><vulnerabilities><vulnerability cve_id="CVE-2020-5398" cvss_score="7.6" severity="4" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="spring-web is vulnerable to reflected file download. The filename attribute that is derived from the user-supplied `Content-Disposition` header is not validated and sanitized, potentially resulting in the downloaded content of the response to be saved and executed as a file by the user's browser. " severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2020-5421" cvss_score="3.6" severity="2" cwe_id="" first_found_date="2021-05-21 18:44:38 UTC" cve_summary="spring-web is vulnerable to Reflected File Download (RFD) attack. An incomplete fix of CVE-2015-5211 allows an attacker to bypass the protection against RFD attack via the `jsessionid` path parameter.&#xa;&#xa;" severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false" /><vulnerability cve_id="CVE-2021-22118" cvss_score="3.6" severity="2" cwe_id="" first_found_date="2021-05-28 06:09:16 UTC" cve_summary="spring-web is vulnerable to privilege escalation. Creating or recreating the temporary storage directory creates multiple instances collision which allows a locally authenticated malicious user to read or modify files being uploaded or overwrite arbitrary files with multipart request data." severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false" /></vulnerabilities><violated_policy_rules /></component></vulnerable_components></software_composition_analysis></detailedreport>